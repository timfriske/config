# = Configuration of Tmux
# Tim Friske <me@tifr.de>
#
# _Tmux_ is a terminal multiplexer software that lets users make better
# use of the screen of a virtual terminal.  It allows them to organize
# their work into several sessions, windows and panes.
#
# Users can switch sessions by connecting their _Tmux_ client from one
# and detach it to another.  Within one session they can then navigate
# between multiple windows each of which may be split into a number of
# panes.  A pane is finally the place where a user usually uses an
# interactive shell to run further programs.
#
# This configuration file shall provide _Tmux_ with sensible settings
# and personalized key bindings in order to make it more accessible.  It
# is split into a section with options only and one with key bindings
# only.
#
# The section of options constitutes the first part of this file.  It
# only configures those server-, global session and -window options with
# impractical settings.  Options with reasonable defaults are not listed
# here but implicitly assumed following the principle of _Convention
# over Configuration_.
#
# The very user specific section of key bindings follows the more
# generic section of options because key bindings are usually a matter
# of strong personal preference with only few chances for acceptance by
# a broader user base.
#
# See also::
#   https://tmux.github.io[Tmux website]
#   https://linux.die.net/man/1/tmux[Tmux manpage]

# Pass escape sequences directly through to the programs running in
# panes in order to prevent any noticable delays.  Setting `escape-time`
# to `0` makes the `Esc` key in the Vim-editor work again without
# delays.
#
# Stop _Tmux_ from waiting `escape-time` milliseconds until it may
# reliably determine if an escape sequence is part of a bound function
# or meta key.
#
# Default::
#   set-option -s escape-time 500
#
set-option -s escape-time 0

# Assume that the modern terminal _Tmux_ supports 256 colors instead of
# _Tmux_ falling back to `screen' without 256 color support as the
# default terminal.
#
# Default::
#   set-option -s default-terminal 'screen'
#
set-option -s default-terminal 'tmux-256color'

# Start a `non-login' shell as opposed to a `login' shell every time a
# new pane without a specific command gets created in order to prevent
# the shell from repeatedly executing code only meant to run once upon
# user login.
#
# With `default-command` set to the environment variable `${SHELL}`
# whose value usually expands to `/bin/bash` an instance of the Bash
# shell in interactive `non-login' mode is started which by default only
# reads from start-up files such as `~/.bashrc` but not `~/.bash_login`
# and the like.
#
# Default::
#   set-option -g default-command ''
#
set-option -g default-command '${SHELL}'

# Use `Ctrl-s` as the prefix to prefixed key bindings because `Ctrl-s`
# is easily reachable by one hand as opposed to the default `Ctrl-b`
# where you had to stretch your fingers too much.  With `Ctrl-s` while
# simultaneously pressing the right `Ctrl` and `s` keys with the left
# hand the right hand is free to reach out even to the farthest prefixed
# key.
#
# Default::
#   set-option -g prefix C-b
#
set-option -g prefix C-s

# Make unconditional use of the specified editor's default key bindings
# in copy mode and command line mode in order to not depend upon whether
# the values of the environment variables `VISUAL` or `EDITOR` contain
# the string `vi` implicitly switching from Emacs- to Vi-editor-like key
# bindings.
#
# Prefer `vi` key bindings in copy mode because the owner of this file
# is much more aquainted with the Vi-editor and its modern derivates Vim
# and NeoVim.  Choose `emacs` key bindings in command line mode because
# these are also the default in Vi's command line mode.
#
# Default::
#   set-option -g mode-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
# Default::
#   set-option -g status-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
#
set-option -g mode-keys vi
set-option -g status-keys emacs

# Align the indexes of windows and panes with the keyboard layout of the
# row of digit keys from `1` to `9` and `0`.  This alignment saves the
# user's hands and fingers from jumping back and forth between the most
# distant digit keys which are `0` and `1` to reach the otherwise zeroth
# and first window or pane.
#
# Default::
#   set-option -g base-index 0
# Default::
#   set-option -g pane-base-index 0
#
set-option -g base-index 1
set-option -g pane-base-index 1

# Renumber windows automatically in order to leave no gaps when
# destroying some of them because the user most probably won't remember
# those gaps giving him a hard time to guess the right index for a
# window after he created and destroyed several windows over an extended
# period of time.  By setting `renumber-windows` to `on` the user can
# rely on an always contiguous, strict montonically increasing sequence
# of window indexes.
#
# Default::
#   set-option -g renumber-windows off
#
set-option -g renumber-windows on

# Make far older, exactly `history-limit` number of lines from the pane
# accessible again through the scrollback buffer once those lines start
# to disappear from the top of a pane.
#
# Persist and restore `history-limit` number of lines from tmux's
# command prompt in the given `history-file` between invocations of
# _Tmux_ to have those previous commands readily available next time.
#
# NOTE: Be mindful to choose a reasonable number of `history-limit`
# lines.  One such scrollback buffer is reserved per pane but cannot be
# resized to regain that memory other than to destroy the pane losing
# all of its past and present contents.  Therefore you should multiply
# the potential number of lines you plan to choose by the average number
# of panes you usually keep open at the same time in order to get an
# idea of the actual memory consumption.
#
# Default::
#   set-option -g history-limit 2000
# Default::
#   set-option -s history-file <'' = do not store command prompt lines>
#
set-option -g history-limit 10000
set-option -s history-file '~/.tmux.hist'

# Keep the last status bar message readable for as long as possible
# until the next key is pressed potentially producing another message.
# Unfortunately the same behavior cannot be configured when displaying
# information about the panes of the currently visible window.
# Therefore increase the time to 5000 milliseconds (5 seconds) for the
# info about the panes to stay in order to be readable too.
#
# Default::
#   set-option -g display-time 750
# Default::
#   set-option -g display-panes-time 1000
#
set-option -g display-time 0
set-option -g display-panes-time 5000

# Don't let the bell sound loudly but silently notify about it in the
# status bar instead.
#
# Default::
#   set-option -g visual-bell off
#
set-option -g visual-bell on

# Notify about any activity in a window with a message shown in the
# status bar as soon as the option `monitor-activity` is set for that
# window.  Do the same when there was silence for too long and the
# option `monitor-silence` is set.
#
# Default::
#   set-option -g visual-activity off
# Default::
#   set-option -g visual-silence off
#
set-option -g visual-activity on
set-option -g visual-silence on

# Pass focus events from the terminal on to the applications running in
# _Tmux_ in order to notify the applications so they can react to the
# events.
#
# NOTE: Attached clients should be detached and attached again after changing
# this option.
#
# Default::
#   set-option -s focus-events off
#
set-option -s focus-events on

# Automatically reattach the client to the most recently active of the
# remaining sessions analogously to the default behavior when destroying
# the current pane.
#
# Default::
#   set-option -g detach-on-destroy on
#
set-option -g detach-on-destroy off

# By default all windows in a session are constrained to the client with
# the smallest screen size connected to that session â€” even if both
# clients are looking at different windows.  It seems that in this
# particular case _Screen_ has the better default where a window is only
# constrained if a client with a smaller screen is actively looking at
# it.  Fix _Tmux's_ default behavior by switching on the option
# `aggressive-resize`.
#
# Default::
#   set-option -g aggressive-resize off
#
set-option -g aggressive-resize on

# Ease keyboard access by using `<prefix>,Space` to enter the command
# prompt.  The `Space` key not only horizontally takes the center
# position, spans a decent length but also resides on the same row as
# the `Ctrl` key.
#
# _Tmux'_ command prompt could have been bound equally well to the even
# more accessible key binding `Ctrl-Space` but that is gladly chosen by
# power users of the _Vim_ editor to bind _Vim's_ command prompt.
# Therefore the slightly more complicated key binding `<prefix>,Space`
# is preferred for _Tmux'_ command prompt because it is assumed to be
# used less often than _Vim's_ command prompt.
#
# Normal mode::
#   `<prefix>,Space`;;
#     Prompt for a command where the status bar is usually located.
#
bind-key Space command-prompt

# Ease keyboard access by using `Ctrl-q` to enter copy mode.  The
# `Ctrl-q` key is a good candidate if the `Ctrl-s` key was chosen as the
# prefix key because they are closely located to each other.  Both keys
# can be easily memorized since they already have an ancient albeit less
# known meaning as terminal control keys, namely `Ctrl-s` for `XOFF`,
# `Pause transition' and `Ctrl-q` for `XON`, `Resume transmission' which
# seemingly freeze and thaw the terminal input and output respectively.
# A further advantage to bind the `Ctrl-q` key to enter the copy mode is
# that the `q` key alone for `quit' exits the copy mode quickly again.
#
# Normal mode::
#   `Ctrl-q`;;
#     Enter the copy mode to copy, page or search the current pane content.
#
bind-key -n C-q copy-mode
