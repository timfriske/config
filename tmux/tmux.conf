# = Configuration of Tmux
# Tim Friske <me@tifr.de>
#
# _Tmux_ is a terminal multiplexer software that lets users make better
# use of the screen of a virtual terminal.  It allows them to organize
# their work into several sessions, windows and panes.
#
# Users can switch sessions by connecting their _Tmux_ client from one
# and detach it to another.  Within one session they can then navigate
# between multiple windows each of which may be split into a number of
# panes.  A pane is finally the place where a user usually uses an
# interactive shell to run further programs.
#
# This configuration file shall provide _Tmux_ with sensible settings
# and personalized key bindings in order to make it more accessible.  It
# is split into a section with options only and one with key bindings
# only.
#
# The section of options constitutes the first part of this file.  It
# only configures those server-, global session and -window options with
# impractical settings.  Options with reasonable defaults are not listed
# here but implicitly assumed following the principle of _Convention
# over Configuration_.
#
# The very user specific section of key bindings follows the more
# generic section of options because key bindings are usually a matter
# of strong personal preference with only few chances for acceptance by
# a broader user base.
#
# See also::
#   https://tmux.github.io[Tmux website]
#   https://linux.die.net/man/1/tmux[Tmux manpage]

# Pass escape sequences directly through to the programs running in
# panes in order to prevent any noticable delays.  Setting `escape-time`
# to `0` makes the `Esc` key in the Vim-editor work again without
# delays.
#
# Stop _Tmux_ from waiting `escape-time` milliseconds until it may
# reliably determine if an escape sequence is part of a bound function
# or meta key.
#
# Default::
#   set-option -s escape-time 500
#
set-option -s escape-time 0

# Assume that the modern terminal _Tmux_ supports 256 colors instead of
# _Tmux_ falling back to `screen' without 256 color support as the
# default terminal.
#
# Default::
#   set-option -s default-terminal 'screen'
#
set-option -s default-terminal 'tmux-256color'

# Start a `non-login' shell as opposed to a `login' shell every time a
# new pane without a specific command gets created in order to prevent
# the shell from repeatedly executing code only meant to run once upon
# user login.
#
# With `default-command` set to the environment variable `${SHELL}`
# whose value usually expands to `/bin/bash` an instance of the Bash
# shell in interactive `non-login' mode is started which by default only
# reads from start-up files such as `~/.bashrc` but not `~/.bash_login`
# and the like.
#
# Default::
#   set-option -g default-command ''
#
set-option -g default-command '${SHELL}'

# Use `Ctrl-s` as the prefix to prefixed key bindings because `Ctrl-s`
# is easily reachable by one hand as opposed to the default `Ctrl-b`
# where you had to stretch your fingers too much.  With `Ctrl-s` while
# simultaneously pressing the right `Ctrl` and `s` keys with the left
# hand the right hand is free to reach out even to the farthest prefixed
# key.
#
# Default::
#   set-option -g prefix C-b
#
set-option -g prefix C-s

# Make unconditional use of the specified editor's default key bindings
# in copy mode and command line mode in order to not depend upon whether
# the values of the environment variables `VISUAL` or `EDITOR` contain
# the string `vi` implicitly switching from Emacs- to Vi-editor-like key
# bindings.
#
# Prefer `vi` key bindings in copy mode because the owner of this file
# is much more aquainted with the Vi-editor and its modern derivates Vim
# and NeoVim.  Choose `emacs` key bindings in command line mode because
# these are also the default in Vi's command line mode.
#
# Default::
#   set-option -g mode-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
# Default::
#   set-option -g status-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
#
set-option -g mode-keys vi
set-option -g status-keys emacs
