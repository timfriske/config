# = Configuration of Tmux
# Tim Friske <me@tifr.de>
#
# _Tmux_ is a terminal multiplexer software that lets users make better
# use of the screen of a virtual terminal.  It allows them to organize
# their work into several sessions, windows and panes.
#
# Users can switch sessions by connecting their _Tmux_ client from one
# and detach it to another.  Within one session they can then navigate
# between multiple windows each of which may be split into a number of
# panes.  A pane is finally the place where a user usually uses an
# interactive shell to run further programs.
#
# This configuration file shall provide _Tmux_ with sensible settings
# and personalized key bindings in order to make it more accessible.  It
# is split into a section with options only and one with key bindings
# only.
#
# The section of options constitutes the first part of this file.  It
# only configures those server-, global session and -window options with
# impractical settings.  Options with reasonable defaults are not listed
# here but implicitly assumed following the principle of _Convention
# over Configuration_.
#
# The very user specific section of key bindings follows the more
# generic section of options because key bindings are usually a matter
# of strong personal preference with only few chances for acceptance by
# a broader user base.
#
# See also::
#   https://tmux.github.io[Tmux website]
#   https://linux.die.net/man/1/tmux[Tmux manpage]

# Pass escape sequences directly through to the programs running in
# panes in order to prevent any noticable delays.  Setting `escape-time`
# to `0` makes the `Esc` key in the Vim-editor work again without
# delays.
#
# Stop _Tmux_ from waiting `escape-time` milliseconds until it may
# reliably determine if an escape sequence is part of a bound function
# or meta key.
#
# Default::
#   set-option -s escape-time 500
#
set-option -s escape-time 0

# Assume that the modern terminal _Tmux_ supports 256 colors instead of
# _Tmux_ falling back to `screen' without 256 color support as the
# default terminal.
#
# Default::
#   set-option -s default-terminal 'screen'
#
set-option -s default-terminal 'tmux-256color'

# Start a `non-login' shell as opposed to a `login' shell every time a
# new pane without a specific command gets created in order to prevent
# the shell from repeatedly executing code only meant to run once upon
# user login.
#
# With `default-command` set to the environment variable `${SHELL}`
# whose value usually expands to `/bin/bash` an instance of the Bash
# shell in interactive `non-login' mode is started which by default only
# reads from start-up files such as `~/.bashrc` but not `~/.bash_login`
# and the like.
#
# Default::
#   set-option -g default-command ''
#
set-option -g default-command '${SHELL}'

# Use `Ctrl-s` as the prefix to prefixed key bindings because `Ctrl-s`
# is easily reachable by one hand as opposed to the default `Ctrl-b`
# where you had to stretch your fingers too much.  With `Ctrl-s` while
# simultaneously pressing the right `Ctrl` and `s` keys with the left
# hand the right hand is free to reach out even to the farthest prefixed
# key.
#
# Default::
#   set-option -g prefix C-b
#
set-option -g prefix C-s

# Make unconditional use of the specified editor's default key bindings
# in copy mode and command line mode in order to not depend upon whether
# the values of the environment variables `VISUAL` or `EDITOR` contain
# the string `vi` implicitly switching from Emacs- to Vi-editor-like key
# bindings.
#
# Prefer `vi` key bindings in copy mode because the owner of this file
# is much more aquainted with the Vi-editor and its modern derivates Vim
# and NeoVim.  Choose `emacs` key bindings in command line mode because
# these are also the default in Vi's command line mode.
#
# Default::
#   set-option -g mode-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
# Default::
#   set-option -g status-keys <'emacs' unless "$VISUAL" or "$EDITOR"
#   contains 'vi'>
#
set-option -g mode-keys vi
set-option -g status-keys emacs

# Align the indexes of windows and panes with the keyboard layout of the
# row of digit keys from `1` to `9` and `0`.  This alignment saves the
# user's hands and fingers from jumping back and forth between the most
# distant digit keys which are `0` and `1` to reach the otherwise zeroth
# and first window or pane.
#
# Default::
#   set-option -g base-index 0
# Default::
#   set-option -g pane-base-index 0
#
set-option -g base-index 1
set-option -g pane-base-index 1

# Renumber windows automatically in order to leave no gaps when
# destroying some of them because the user most probably won't remember
# those gaps giving him a hard time to guess the right index for a
# window after he created and destroyed several windows over an extended
# period of time.  By setting `renumber-windows` to `on` the user can
# rely on an always contiguous, strict montonically increasing sequence
# of window indexes.
#
# Default::
#   set-option -g renumber-windows off
#
set-option -g renumber-windows on

# Make far older, exactly `history-limit` number of lines from the pane
# accessible again through the scrollback buffer once those lines start
# to disappear from the top of a pane.
#
# Persist and restore `history-limit` number of lines from tmux's
# command prompt in the given `history-file` between invocations of
# _Tmux_ to have those previous commands readily available next time.
#
# NOTE: Be mindful to choose a reasonable number of `history-limit`
# lines.  One such scrollback buffer is reserved per pane but cannot be
# resized to regain that memory other than to destroy the pane losing
# all of its past and present contents.  Therefore you should multiply
# the potential number of lines you plan to choose by the average number
# of panes you usually keep open at the same time in order to get an
# idea of the actual memory consumption.
#
# Default::
#   set-option -g history-limit 2000
# Default::
#   set-option -s history-file <'' = do not store command prompt lines>
#
set-option -g history-limit 10000
set-option -s history-file '~/.tmux.hist'

# Keep the last status bar message readable for as long as possible
# until the next key is pressed potentially producing another message.
# Unfortunately the same behavior cannot be configured when displaying
# information about the panes of the currently visible window.
# Therefore increase the time to 5000 milliseconds (5 seconds) for the
# info about the panes to stay in order to be readable too.
#
# Default::
#   set-option -g display-time 750
# Default::
#   set-option -g display-panes-time 1000
#
set-option -g display-time 0
set-option -g display-panes-time 5000

# Don't let the bell sound loudly but silently notify about it in the
# status bar instead.
#
# Default::
#   set-option -g visual-bell off
#
set-option -g visual-bell on

# Notify about any activity in a window with a message shown in the
# status bar as soon as the option `monitor-activity` is set for that
# window.  Do the same when there was silence for too long and the
# option `monitor-silence` is set.
#
# Default::
#   set-option -g visual-activity off
# Default::
#   set-option -g visual-silence off
#
set-option -g visual-activity on
set-option -g visual-silence on

# Pass focus events from the terminal on to the applications running in
# _Tmux_ in order to notify the applications so they can react to the
# events.
#
# NOTE: Attached clients should be detached and attached again after changing
# this option.
#
# Default::
#   set-option -s focus-events off
#
set-option -s focus-events on

# Automatically reattach the client to the most recently active of the
# remaining sessions analogously to the default behavior when destroying
# the current pane.
#
# Default::
#   set-option -g detach-on-destroy on
#
set-option -g detach-on-destroy off

# By default all windows in a session are constrained to the client with
# the smallest screen size connected to that session â€” even if both
# clients are looking at different windows.  It seems that in this
# particular case _Screen_ has the better default where a window is only
# constrained if a client with a smaller screen is actively looking at
# it.  Fix _Tmux's_ default behavior by switching on the option
# `aggressive-resize`.
#
# Default::
#   set-option -g aggressive-resize off
#
set-option -g aggressive-resize on

# Ease keyboard access by using `<prefix>,Space` to enter the command
# prompt.  The `Space` key not only horizontally takes the center
# position, spans a decent length but also resides on the same row as
# the `Ctrl` key.
#
# _Tmux'_ command prompt could have been bound equally well to the even
# more accessible key binding `Ctrl-Space` but that is gladly chosen by
# power users of the _Vim_ editor to bind _Vim's_ command prompt.
# Therefore the slightly more complicated key binding `<prefix>,Space`
# is preferred for _Tmux'_ command prompt because it is assumed to be
# used less often than _Vim's_ command prompt.
#
# Normal mode::
#   `<prefix>,Space`;;
#     Prompt for a command where the status bar is usually located.
#
bind-key Space command-prompt

# Ease keyboard access by using `Ctrl-q` to enter copy mode.  The
# `Ctrl-q` key is a good candidate if the `Ctrl-s` key was chosen as the
# prefix key because they are closely located to each other.  Both keys
# can be easily memorized since they already have an ancient albeit less
# known meaning as terminal control keys, namely `Ctrl-s` for `XOFF`,
# `Pause transition' and `Ctrl-q` for `XON`, `Resume transmission' which
# seemingly freeze and thaw the terminal input and output respectively.
# A further advantage to bind the `Ctrl-q` key to enter the copy mode is
# that the `q` key alone for `quit' exits the copy mode quickly again.
#
# Normal mode::
#   `Ctrl-q`;;
#     Enter the copy mode to copy, page or search the current pane content.
#
bind-key -n C-q copy-mode

# Ease keyboard access to perform the probably most frequent action,
# namely toggling panes, by simply pressing the prefix key twice.
#
# Normal mode::
#   `<prefix>,<prefix>`;;
#     Toggle between the current and previous pane.
#
bind-key C-s select-pane -l

# Ease keyboard access to toggle between the two most recent sessions,
# windows or panes.
#
# Normal mode::
#   `Alt-s`;;
#     Toggle between the current and previous pane.
#   `Alt-S`;;
#     Toggle between the current and previous window.
#   `Ctrl-Alt-s`;;
#     Toggle between the current and previous session.
#
bind-key -n M-s select-pane -l
bind-key -n M-S select-window -l
bind-key -n C-M-s switch-client -l

# Ease keyboard access to rename a window or session by centering these
# commands around the letter key `n`.
#
# Normal mode::
#   `<prefix>,n`;;
#     Rename the current window whose present name is shown as a reminder.
#   `<prefix>,N`;;
#     Rename the current session whose present name is shown as a reminder.
#
bind-key n command-prompt -p 'rename window "#W":' 'rename-window "%%"'
bind-key N command-prompt -p 'rename session "#S":' 'rename-session "%%"'

# Ease keyboad access to find a window either by name or title and
# content by centering these commands around the letter key `f`.
# Searching by window name only helps to substantially narrow down the
# found windows increasing the probability to directly jump to the
# chosen window.
#
# Normal mode::
#   `<prefix>,f`;;
#     Find the window by name.
#   `<prefix>,F`;;
#     Find the window by title and content.
#
bind-key f command-prompt -p 'find window by name:' 'find-window -N "%%"'
bind-key F command-prompt -p 'find window by title and content:' \
  'find-window -TC "%%"'

# Ease keyboard access to choose a buffer, client, session, window or a
# tree of sessions and windows from a menu.  Bind the key that with the
# first letter of the corresponding class of objects for the key to be
# memorizable.
#
# Normal mode::
#   `<prefix>,b`;;
#     Show a menu of buffers to paste into the current pane.
#   `<prefix>,c`;;
#     Show a menu of clients to detach from the current session.
#   `<prefix>,s`;;
#     Show a menu of sessions to switch the current client to.
#   `<prefix>,t`;;
#     Show a menu of sessions and windows with the same choices.
#   `<prefix>,w`;;
#     Show a menu of windows to switch the current client to.
#
bind-key b choose-buffer
bind-key c choose-client
bind-key s choose-session
bind-key t choose-tree
bind-key w choose-window

# Ease keyboard access to the most useful session commands by centering
# them around the arrow keys `Up`, `Down`, `Left` and `Right` in
# combination with the modifier key `Ctrl`.
#
# Normal mode::
#   `Ctrl-Up`;;
#     Create a session and switch the client to it.
#   `Ctrl-Down`;;
#     Choose a session and switch the client to it.
#   `Ctrl-Left`;;
#     Switch the client to the previous session.
#   `Ctrl-Right`;;
#     Switch the client to the next session.
#
bind-key -n C-Up new-session
bind-key -n C-Down choose-session
bind-key -n C-Left switch-client -p
bind-key -n C-Right switch-client -n

# Ease keyboard access to the most useful window commands by centering
# them around the arrow keys `Up`, `Down`, `Left` and `Right` in
# combination with the modifier keys `Alt` and `Shift`.
#
# Normal mode::
# `Alt-Up`;;
#   Create a window and bring it to foreground right to the current one.
# `Alt-Down`;;
#   Create a window and bring it to background right to the current one.
# `Alt-Left`;;
#   Switch from the current window to the left one.
# `Alt-Right`;;
#   Switch from the current window to the right one.
# `Alt-Shift-Up`;;
#   Create a window and bring it to foreground left to the current one.
# `Alt-Shift-Down`;;
#   Create a window and bring it to background left to the current one.
# `Alt-Shift-Left`;;
#   Swap the current window with the left one.
# `Alt-Shift-Right`;;
#   Swap the current window with the right one.
#
bind-key -n M-Up new-window -a
bind-key -n M-Down new-window -ad
bind-key -n M-Left previous-window
bind-key -n M-Right next-window
bind-key -n M-S-Up new-window -a \; swap-window -t :-1
bind-key -n M-S-Down new-window -ad \; swap-window -t :+1
bind-key -n M-S-Left swap-window -t :-1
bind-key -n M-S-Right swap-window -t :+1

# Ease keyboard access to the most useful window commands by centering
# them around the letter keys `z` and `x` in combination with the
# modifier keys `Ctrl` and `Alt`.
#
# Normal mode::
#   `Ctrl-Alt-z`;;
#     Create a window and bring it to background right to the current
#     one.
#   `Ctrl-Alt-x`;;
#     Create a window and bring it to foreground right to the current
#     one.
#   `Alt-z`;;
#     Switch from the current window to the left one.
#   `Alt-x`;;
#     Switch from the current window to the right one.
#   `Alt-Z`;;
#     Swap the current window with the left one.
#   `Alt-X`;;
#     Swap the current window with the right one.
#
bind-key -n C-M-z new-window -ad
bind-key -n C-M-x new-window -a
bind-key -n M-z previous-window
bind-key -n M-x next-window
bind-key -n M-Z swap-window -t :-1
bind-key -n M-X swap-window -t :+1

# Eease keyboard access to select windows by number by only holding the
# `Alt` key and pressing a single digit key to reach windows from number
# 1 to 10.  These key bindings mimic the common behavior of GUI terminal
# applications which allow users to access their tabs by number.
#
# Normal mode::
#   `Alt-1`;;
#   `Alt-2`;;
#   `Alt-3`;;
#   `Alt-4`;;
#   `Alt-5`;;
#   `Alt-5`;;
#   `Alt-6`;;
#   `Alt-7`;;
#   `Alt-8`;;
#   `Alt-9`;;
#   `Alt-0`;;
#     Jump to a window with a number between 1 and 10; where 0 = 10.
#
# NOTE: The `base-index` option should be set to `1` in order to be
# aligned with the row of digit keys.
#
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-0 select-window -t :10

# Ease keyboard access to split the current window horizontally as well
# as vertically and above as well as below the current pane into further
# panes.  These key bindings mimic those of Vi's movement keys and thus
# should be familiar.
#
# Normal mode::
#   `Alt-H`;;
#     Create a pane left the current pane.
#   `Alt-J`;;
#     Create a pane below the current pane.
#   `Alt-K`;;
#     Create a pane above the current pane.
#   `Alt-L`;;
#     Create a pane right the current pane.
#
bind-key -n M-H split-window -hb
bind-key -n M-J split-window -v
bind-key -n M-K split-window -vb
bind-key -n M-L split-window -h

# Ease keyboard access to switch from the current pane to the panes
# left, right, above and below it.  These key bindings mimic those of
# Vi's movement keys and thus should be familiar.
#
# Normal mode::
#   `Alt-h`;;
#     Switch to the pane left the current pane.
#   `Alt-j`;;
#     Switch to the pane below the current pane.
#   `Alt-k`;;
#     Switch to the pane above the current pane.
#   `Alt-l`;;
#     Switch to the pane right the current pane.
#
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

# Ease keyboard access to resize the current pane in repeatable steps of
# two screen rows or columns.  These key bindings mimic those of Vi's
# movement keys and thus should be familiar.
#
# Normal mode::
#   `<prefix>,h`;;
#     Resize the current pane to the left.
#   `<prefix>,j`;;
#     Resize the current pane to the bottom.
#   `<prefix>,k`;;
#     Resize the current pane to the top.
#   `<prefix>,l`;;
#     Resize the current pane to the right.
#
bind-key -r h resize-pane -L 2
bind-key -r j resize-pane -D 2
bind-key -r k resize-pane -U 2
bind-key -r l resize-pane -R 2

# Ease keyboard access to show information about the panes or current
# window.
#
# Normal mode::
#   `<prefix>-i`;;
#     Show info about the panes of the current window.
#   `<prefix>-I`;;
#     Show info about the current window itself.
#
bind-key i display-panes
bind-key I display-message

# Make the search directly accessible from normal mode.  Without these
# key bindings the user had to issue two commands.  The first command
# only to switch into copy mode and the second one to get prompted for
# the search string.
#
# Unfortunately the much better `incremental' search is only bound by
# default in copy mode `emacs` whereas only the inferior `normal' search
# is bound by default in copy mode `vi`.
#
# The key bindings below enable the user to start searching upon
# entering the very first few characters of the search string.  While
# typing the search results get continually updated, i.e. narrowed the
# more and widened the less characters are used to refine the search.
# For these reasons this so called `incremental' search is preferred
# over the default search mechansim which starts to search only when the
# user entered the entire search string.  With the standard mechansim
# the user had to enter the same keys again and again every time he
# wishes to adapt the search string.
#
# Normal mode::
#   `Alt-/`;;
#     Enter copy mode to search forward while typing.
#   `Alt-?`;;
#     Enter copy mode to search backwards while typing.
# Copy mode Vi::
#   `/`;;
#     Search forward while typing.
#   `?`;;
#     Search backwards while typing.
#
bind-key -n M-/ command-prompt -i -p / \
  'send-keys -X search-forward-incremental "%%"'
bind-key -T copy-mode-vi / command-prompt -i -p / \
  'send-keys -X search-forward-incremental "%%"'
bind-key -n M-? command-prompt -i -p ? \
  'send-keys -X search-backward-incremental "%%"'
bind-key -T copy-mode-vi ? command-prompt -i -p ? \
  'send-keys -X search-backward-incremental "%%"'

# Ease keyboard access to edit and reload the user configuration.
#
# Normal mode::
#   `<prefix>,E`;;
#     Load the user configuration into a text editor and display it side
#     by side with tmux's manual page for help in a new window labelled
#     _Tmux_.
#   `<prefix>,e`;;
#     Reload the user configuration.
#
bind-key E new-window -a -n Tmux '"${VISUAL:-${EDITOR:-vi}}" ~/.tmux.conf' \;\
  split-window -dh 'man 1 tmux'
bind-key e source-file ~/.tmux.conf \; display-message '~/.tmux.conf reloaded'

# Ease keyboard access to paste the latest or chosen buffer into the
# current pane by centering these commands around the letter key `p`.
#
# Normal mode::
#   `<prefix>,p`;;
#     Paste the latest buffer; repetitions possible.
#   `<prefix>,P`;;
#     Paste the chosen buffer.
#
bind -r p paste-buffer
bind P choose-buffer

# Ease keyboard access to copy to and paste from the clipboard in order
# to painlessly exchange text between terminal and GUI applications.
# These key bindings mimic those of desktop environments and thus should
# be familiar.
#
# Normal mode::
#   `Ctrl-c`;;
#     Copy the current pane's content into the clipboard.
#   `Ctrl-v`;;
#     Paste the clipboard's content into the current pane.
#
bind-key C-c choose-buffer 'run "tmux save-buffer -b \"%%\" - | xsel --input --clipboard"'
bind-key -r C-v run 'tmux set-buffer "$(xclip --output --clipboard)"; tmux paste-buffer'
