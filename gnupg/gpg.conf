# = GnuPG's GPG configuration
# Tim Friske <me@tifr.de>
#
# A program to a/symmetrically encrypt and decrypt data as well as
# digitally sign that data in order to verify its integrity and
# authenticity later on.  For its asymmetric encryption and digital
# signature verification _GnuPG_ makes use of public key cryptography.
#
# A _GnuPG_ public key and its private counterpart may also be used as a
# drop-in replacement for a Secure Shell (SSH) key to grant access to
# remote systems.
#
# == Important Security Considerations
#
# WARNING: For maximum security you should have different keys for
# different purposes namely one and only one for each of _GnuPG_'s key
# capabilities.  These are `[C]ertification' for certifying keys,
# `[S]igning' for signing data, `[E]ncryption' for encrypting data and
# `[A]uthentication` for authenticating to remote systems.  Keep your
# secret certification keys encrypted and offline â€” or at least
# encrypted and separate from your secondary keys.  Your secret
# certification keys are the most valuable and thus important ones and
# therefore must be protected against any disclosure and misuse under
# all circumstances.  With these keys you establish your online identity
# and prove to others that it is really you they are engaging with.
# Your certification keys are the only kind of keys others have
# carefully verified before they certify and trust them.  You have been
# warned!

# Use the last of the explicitly given secret keys that exists as the
# default key for signing.  Don't rely on some arbitrary secret key that
# happens to be the first key that was found and therefore implicitly
# chosen by _GPG_.
#
# Besides the secret key chosen by default try further secret keys when
# attempts are made to decrypt a message with hidden recipients and the
# correct decryption key must be guessed by trial and error.
#
###default-key NAME
###default-key NAME
###try-secret-key NAME
###try-secret-key NAME

# Allow _GPG_ to put the same ultimate trust in the following keys as
# you do in your secret keys.  You should list all your secret keys you
# use for certification here and subsequently move them to an encrypted
# storage medium that you keep offline in order to protect these keys
# against disclosure and misuse.
#
###trusted-key LONG KEY ID
###trusted-key LONG KEY ID

# Add each of the given keys as one of the default recipients of an
# encrypted message in that order to have them automatically addressed
# if none was given with the option `recipient` or else each of the keys
# given with `encrypt-to` as a recpient to additionally encrypt to.
#
# When it comes to the decision of either disclosing the recipients to
# others or hiding these from those the most flexible way is to specify
# the default recipients with the options `default-recipient` and
# `encrypt-to` as opposed to the options' `hidden' counterparts in this
# configuration file.  By doing so this decision can be deferred and
# made at runtime by invoking _GPG_ with the option `throw-keyids` to
# discard all key IDs and therefore hide all recipients in an ad hoc
# fashion.
#
###default-recipient NAME
###default-recipient NAME
###encrypt-to NAME
###encrypt-to NAME

# While locally exporting keys:
#
#   * keep the exported copies clean by removing all unusable user IDs
#     and signatures.  Exporting a minimal key ring only makes sense on
#     occasion when we do not want to disclose its social graph more
#     often than needed.
#   * do not export photo IDs a.k.a attributes since we favor user IDs
#     a.k.a text IDs which do not bloat the size of the key rings with
#     image data.
#
# For key backup please invoke _GPG_ with `--export-options backup`.
# The export option `backup` safely overrides all incompatible export
# options.
#
export-options export-clean no-export-attributes

# While locally importing keys:
#
#   * keep the imported copies clean by removing all unusable user IDs
#     and signatures.  Importing a minimal key ring usually does not
#     make sense because it would lose valid signatures made by others
#     making it impossible to rebuild the Web of Trust among the keys in
#     the local key box.
#
# For key restore please invoke _GPG_ with `--import-options restore`.
# The import option `restore` safely overrides all incompatible import
# options.
#
import-options import-clean

# While sending keys to or receiving keys from a remote key server:
#
#   * keep the exported copies clean by removing all unusable user IDs
#     and signatures.
#   * do not export photo IDs a.k.a attributes since we favor user IDs
#     a.k.a text IDs which do not bloat the size of the key rings with
#     image data.
#   * keep the imported copies clean by removing all unusable user IDs
#     and signatures.
#
keyserver-options export-clean no-export-attributes import-clean
