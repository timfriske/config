---
# Amazon AWS EKS Workers CloudFormation template
# ==============================================
# Tim Friske <me@tifr.de>
#
# Amazon License
# --------------
# Copyright (c) 2018 Amazon.com, Inc. or its affiliates.  All rights
# reserved.
#
# This file originates from the
# https://amazon-eks.s3-us-west-2.amazonaws.com/[Amazon EKS S3 bucket]
# GitHub repository.  Its original version can be found under
# `/cloudformation/2019-02-11/amazon-eks-nodegroup.yaml`.
#
# AWS CloudFormation template to create the resources pertaining to the
# worker nodes of the EKS cluster.

AWSTemplateFormatVersion: 2010-09-09

Description: >-
  The Amazon AWS EKS worker nodes configuration.

Parameters:

  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >-
      The security group of the cluster control plane.

  ClusterName:
    Type: String
    AllowedPattern: "^\\S+$"
    Description: >-
      The cluster name.

  NodeBootstrapArgs:
    Type: String
    Description: >-
      The arguments to pass to the bootstrap script. See
      files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami.

  NodeConfigMediumEnabled:
    Type: String
    Default: true
    AllowedValues: [false, true]
    Description: >-
      The switch whether to enable or disable the medium node
      configuration.  See
      https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html.

  NodeConfigSmallEnabled:
    Type: String
    Default: true
    AllowedValues: [false, true]
    Description: >-
      The switch whether to enable or disable the small node
      configuration.  See
      https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html.

  NodeImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: >-
      The EC2 image ID for the worker nodes taken from the Parameter
      Store of the AWS Systems Manager.  See
      https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
      for a list of AWS AMIs available for EKS.

  NodeKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: indivupipe-eks
    Description: >-
      The EC2 key pair to allow SSH access to the instances.

  NodeRoleName:
    Type: String
    Default: eks-node-instance-role
    AllowedPattern: "^\\S+$"
    Description: >-
      Name of an existing IAM role that shall be assigned to the worker
      nodes such that they can register with the master nodes of the
      control plane.

  NodeRootVolumeSizeMedium:
    Type: Number
    Default: 50
    MinValue: 20
    Description: >-
      The root volume size of medium worker nodes.

  NodeRootVolumeSizeSmall:
    Type: Number
    Default: 50
    MinValue: 20
    Description: >-
      The root volume size of small worker nodes.

  NodeTypeMedium:
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.2xlarge
      - m5a.2xlarge
      - m5d.2xlarge
      - m5n.2xlarge
      - m5dn.2xlarge
      - m4.2xlarge
    Description: >-
      The EC2 instance type for medium worker nodes.  The types must be
      similar in terms of CPU cores and main memory for the Kubernetes
      cluster auto scaler to work right.  See
      https://aws.amazon.com/de/ec2/instance-types/.

  NodeTypeSmall:
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
      - m5a.xlarge
      - m5d.xlarge
      - m5n.xlarge
      - m5dn.xlarge
      - m4.xlarge
    Description: >-
      The EC2 instance type for small worker nodes.  The types must be
      similar in terms of CPU cores and main memory for the Kubernetes
      cluster auto scaler to work right.  See
      https://aws.amazon.com/de/ec2/instance-types/.

  VpcNetworkId:
    Type: AWS::EC2::VPC::Id
    Description: >-
      The VPC of the worker nodes.

  VpcSubnetCount:
    Type: Number
    Default: 3
    AllowedValues: [1, 2, 3]
    Description: >-
      The number of subnets. Must be less than or equal to the number of
      subnet IDs selected.

  VpcSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >-
      The subnets where the worker nodes can be created.

Conditions:

  HasThirdVpcSubnet:
    !Equals [!Ref VpcSubnetCount, 3]

  HasSecondVpcSubnet:
    Fn::Or:
      - !Equals [!Ref VpcSubnetCount, 2]
      - Condition: HasThirdVpcSubnet

  HasFirstVpcSubnet:
    Fn::Or:
      - !Equals [!Ref VpcSubnetCount, 1]
      - Condition: HasSecondVpcSubnet

  HasNodeConfigMediumEnabled:
    !Equals [!Ref NodeConfigMediumEnabled, true]

  HasNodeConfigSmallEnabled:
    !Equals [!Ref NodeConfigSmallEnabled, true]

  HasNodeLaunchMediumAzOne:
    Fn::And:
      - Condition: HasFirstVpcSubnet
      - Condition: HasNodeConfigMediumEnabled

  HasNodeLaunchMediumAzTwo:
    Fn::And:
      - Condition: HasSecondVpcSubnet
      - Condition: HasNodeConfigMediumEnabled

  HasNodeLaunchSmallAzOne:
    Fn::And:
      - Condition: HasFirstVpcSubnet
      - Condition: HasNodeConfigSmallEnabled

  HasNodeLaunchSmallAzTwo:
    Fn::And:
      - Condition: HasSecondVpcSubnet
      - Condition: HasNodeConfigSmallEnabled

  HasNodeLaunchSmallAzThree:
    Fn::And:
      - Condition: HasThirdVpcSubnet
      - Condition: HasNodeConfigSmallEnabled

Resources:

  NodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref NodeRoleName

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VpcNetworkId
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow nodes to communicate with each other.
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromClusterControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow the kubelets and pods running on the worker nodes to
        receive communication from the cluster control plane.
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ClusterControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow the cluster control plane to communicate with the kubelets
        and pods running on the worker nodes.
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromClusterControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow pods running extension API servers on port 443 to receive
        communication from cluster control plane.
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow the cluster control plane to communicate with pods running
        extension API servers on port 443.
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: >-
        Allow pods to communicate with the cluster API server.
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  NodeLaunchSmallAzOne:
    Condition: HasNodeLaunchSmallAzOne
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref NodeRootVolumeSizeSmall
              VolumeType: gp2
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt NodeProfile.Arn
        ImageId: !Ref NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref NodeTypeSmall
        KeyName: !Ref NodeKeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt NodeSecurityGroup.GroupId
            SubnetId: !Select [0, !Ref VpcSubnetIds]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-small-az1
          - ResourceType: instance
            Tags:
              - Key: !Sub kubernetes.io/cluster/${ClusterName}
                Value: owned
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${NodeBootstrapArgs}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeAsgSmallAzOne  \
                      --region ${AWS::Region}

  NodeLaunchSmallAzTwo:
    Condition: HasNodeLaunchSmallAzTwo
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref NodeRootVolumeSizeSmall
              VolumeType: gp2
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt NodeProfile.Arn
        ImageId: !Ref NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref NodeTypeSmall
        KeyName: !Ref NodeKeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt NodeSecurityGroup.GroupId
            SubnetId: !Select [1, !Ref VpcSubnetIds]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-small-az2
          - ResourceType: instance
            Tags:
              - Key: !Sub kubernetes.io/cluster/${ClusterName}
                Value: owned
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${NodeBootstrapArgs}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeAsgSmallAzTwo  \
                      --region ${AWS::Region}

  NodeLaunchSmallAzThree:
    Condition: HasNodeLaunchSmallAzThree
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref NodeRootVolumeSizeSmall
              VolumeType: gp2
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt NodeProfile.Arn
        ImageId: !Ref NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref NodeTypeSmall
        KeyName: !Ref NodeKeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt NodeSecurityGroup.GroupId
            SubnetId: !Select [2, !Ref VpcSubnetIds]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-small-az3
          - ResourceType: instance
            Tags:
              - Key: !Sub kubernetes.io/cluster/${ClusterName}
                Value: owned
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${NodeBootstrapArgs}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeAsgSmallAzThree \
                      --region ${AWS::Region}

  NodeLaunchMediumAzOne:
    Condition: HasNodeLaunchMediumAzOne
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref NodeRootVolumeSizeMedium
              VolumeType: gp2
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt NodeProfile.Arn
        ImageId: !Ref NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref NodeTypeMedium
        KeyName: !Ref NodeKeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt NodeSecurityGroup.GroupId
            SubnetId: !Select [0, !Ref VpcSubnetIds]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-medium-az1
          - ResourceType: instance
            Tags:
              - Key: !Sub kubernetes.io/cluster/${ClusterName}
                Value: owned
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${NodeBootstrapArgs}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeAsgMediumAzOne  \
                      --region ${AWS::Region}

  NodeLaunchMediumAzTwo:
    Condition: HasNodeLaunchMediumAzTwo
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref NodeRootVolumeSizeMedium
              VolumeType: gp2
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt NodeProfile.Arn
        ImageId: !Ref NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref NodeTypeMedium
        KeyName: !Ref NodeKeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt NodeSecurityGroup.GroupId
            SubnetId: !Select [1, !Ref VpcSubnetIds]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-medium-az2
          - ResourceType: instance
            Tags:
              - Key: !Sub kubernetes.io/cluster/${ClusterName}
                Value: owned
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ClusterName} ${NodeBootstrapArgs}
              /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack  ${AWS::StackName} \
                      --resource NodeAsgMediumAzTwo  \
                      --region ${AWS::Region}
