#!/usr/bin/env bash

# TAR Tape Archive creation
# =========================
# Tim Friske <me@tifr.de>
#
# Simple tape archive (TAR) creation utility which archives and
# optionally compresses a given folder by creating an archive file with
# the folder contents, folder name as base name and the appropriate file
# extension.
#
# Depending under which name this program is invoked it either creates
# an uncompressed TAR archive or one with different compression
# algorithms.  To achieve that this program must be installed as `mktar`
# together with the symbolic links `mktbz`, `mktgz`, `mktxz`, `mktzst`
# pointing at it.  Thereby each of the symbolic links represents the
# different compression algorithms with which to compress the resulting
# TAR file.
#
# See also:
#   * man:bash[1]
#   * man:tar[1]
#   * man:bzip2[1]
#   * man:gzip[1]
#   * man:xz[1]
#   * man:zstd[1]

shopt -os nounset pipefail errexit errtrace

declare -r prog_name="${0##*/}"

declare -Ar prog_formats=(
  [mktar]='tar'
  [mktbz]='tar.bz2'
  [mktgz]='tar.gz'
  [mktxz]='tar.xz'
  [mktzst]='tar.zst'
)

function errmsg {
  echo >&2 "$@"
}

function get_path {
  realpath --no-symlinks "$1"
}

function get_path_rel {
  realpath --no-symlinks --relative-base='.' "$1"
}

function mktar {
  if [[ "$#" -eq 0 ]]; then
    errmsg 'usage: mktar <file>|<folder>'
    errmsg 'usage: mktbz <file>|<folder>'
    errmsg 'usage: mktgz <file>|<folder>'
    errmsg 'usage: mktxz <file>|<folder>'
    errmsg 'usage: mktzst <file>|<folder>'
    exit 1
  fi
  local fs_path="$(get_path "${1:-}")"
  if [[ ! -e "$fs_path" ]]; then
    errmsg 'First argument must be path to existing file or folder!'
    exit 1
  fi
  if [[ "$fs_path" == '/' ]]; then
    errmsg 'Cannot archive root folder. Use GNU Tar for that!'
  fi
  local file_path="$fs_path.${prog_formats[$prog_name]:-'tar'}"
  local folder_path="$(get_path_rel "${1:-}")"
  echo '# Archiving files ...'
  echo '# ==================='
  tar \
    --create \
    --file="$file_path" \
    --auto-compress \
    --verbose \
    -- \
    "$folder_path"
  local message="... files archived in $file_path"
  local msg_sep="$(eval printf '=%.0s' {1..${#message}})"
  echo "# $msg_sep"
  echo "# $message"
}

mktar "$@"
