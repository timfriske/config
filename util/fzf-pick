#!/usr/bin/env bash
#
# Fuzzy-find and pick records w/ Fzf
# ==================================
# Tim Friske <me@tifr.de>
#
# Dependencies::
#   _Bash_, _Cat_, _Fzf_, _Xargs_

shopt -os nounset pipefail errexit errtrace

function print_help {
  1>&2 cat \
<<'HELP'
Help
====
Fuzzy-find and pick records with _Fzf_.

Usage
-----
.Command line syntax
----
fzf-pick [--help]

[<variable>=<value>]... fzf-pick

[opts="<fzf-opt-1> <fzf-opt-2> ..."] fzf-pick
----

Options
-------
--help::
  Print this program's help text.

opts="<fzf-opt-1> <fzf-opt-2> ..."::
  Set options for _Fzf_.

The program _Fzf-pick_ reads records from the standard input stream,
presents them in an interactive search screen to the user and waits for
her/him to fuzzy-find and pick the records s/he is interested in.  Once
the user made her/his selection _Fzf-pick_ writes the selected records
to the standard output stream.

This program prints one record per line and quotes it when connected to
a terminal for readability.  But when its output is redirected, e.g.
piped through another program for further processing, it prints unquoted
but null-terminated records instead to make them securely processible.
HELP
}

function pick_records {
  local env_opts=()
  env_opts+=(${FZF_DEFAULT_OPTS:-})
  env_opts+=(${FZF_PICK_FZF_OPTS:-})

  local prg_opts=(${opts:-})

  local opt_read=()
  if [[ ! -t 0 ]]; then
    opt_read=('--read0')
  fi

  local opt_print=()
  if [[ ! -t 1 ]]; then
    opt_print=('--print0')
  fi

  fzf \
    "${env_opts[@]}" \
    "${prg_opts[@]}" \
    "${opt_read[@]}" \
    "${opt_print[@]}"
}

function print_cmd_line {
  if [[ -n "${cmd:-}" ]]; then
    pick_records \
      | xargs --null --replace={} --no-run-if-empty -- \
        bash -c "printf '%s\n' \"${cmd:-}\"; printf '%q\n' {}"
  else
    pick_records
  fi
}

function fzf_pick {
  if [[ "${1:-}" == '--help' ]]; then
    print_help
    exit
  fi

  if [[ -n "${cmd:-}" ]]; then
    pick_records \
      | xargs --null --replace={} --no-run-if-empty -- \
        bash -c "printf '%s\n' \"${cmd:-}\"; printf "%q\n" {}"
    exit
  fi

  local record=''
  while IFS= read -r -d '' record; do
    printf '%q\0' "$record"
  done | print_cmd_line
}

fzf_pick "$@"
