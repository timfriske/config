#!/usr/bin/env bash
#
# Find file system objects w/ Find for Fzf
# ========================================
# Tim Friske <me@tifr.de>
#
# Dependencies::
#   _Bash_, _Cat_, _Find_

shopt -os nounset pipefail errexit errtrace

function print_help {
  1>&2 cat \
<<'HELP'
Help
====
Find file system objects with _Find_ for _Fzf_.

Usage
-----
.Command line syntax
----
fzf-find [--help]

[<variable>=<value>]... fzf-find

[hidden=1|true] fzf-find

[kind=file|folder|link] fzf-find
----

Options
-------
--help::
  Print this program's help text.

hidden=1|true::
  Include hidden file system objects or visible ones but hidden in
  folders.

kind=file|folder|link::
  Find either files, folders or links only.

The program _Fzf-find_ finds file system objects below the current
folder with _Find_ for further consumption by _Fzf_.  By default it will
only find visible objects, i.e. those whose names don't start with the
`.` dot sign.  This also excludes visible objects in hidden folders.
With _Fzf-find's_ `hidden` variable set to either `1` or `true` hidden
objects can be found too.  It can be restricted to find objects of a
certain type only by passing that type with the `kind` variable set to
either `file`, `folder` or `link`.

File systems which are known to contain objects of low interest, i.e.
those in which the user doesn't search for objects on a regular basis
are excluded from search and therefore their contents not printed.
These are currently `sysfs`, `devfs`, `devtmpfs` and `proc`.

This program prints the name of one file system object per line and
quotes that name when connected to a terminal for readability.  But when
its output is redirected, e.g.  piped through another program for
further processing, it prints unquoted but null-terminated entries
instead to make them securely processible.
HELP
}

function find_fs_objects {
  local opt_path=('-false')
  if [[ ! "${hidden:-}" =~ 1|true ]]; then
    opt_path=('-path' '*/.*')
  fi

  local opt_type=()
  case "${kind:-}" in
    file) opt_type=('-type' 'f');;
    folder) opt_type=('-type' 'd');;
    link) opt_type=('-xtype' 'l');;
    *);;
  esac

  local opt_print=('-print')
  if [[ ! -t 1 ]]; then
    opt_print=('-print0')
  fi

  find -L -mindepth 1 \
    \( \
      "${opt_path[@]}" \
      -o -fstype sysfs \
      -o -fstype devfs \
      -o -fstype devtmpfs \
      -o -fstype proc \
    \) \
    -prune \
    -o "${opt_type[@]}" \
    "${opt_print[@]}"
}

function fzf_find {
  if [[ "${1:-}" == '--help' ]]; then
    print_help
    exit
  fi

  if [[ ! -t 1 ]]; then
    find_fs_objects
    exit
  fi

  local fs_object=''
  while IFS= read -r -d '' fs_object; do
    printf '%q\n' "$fs_object"
  done < <(find_fs_objects)
}

fzf_find "$@"
