# = Git Log' global configuration
# Tim Friske <me@tifr.de>
#
# Configures the `git-log` command of _Git_.
#
# _Git_ is a _DVCS_ _Distributed Version Control System_ which manages
# snapshots of a file system tree once the tree's nodes are put under
# _Git's_ control.
#
# It is recommended to copy this file into the folder `global.d/command`
# underneath _Git's_ configuration folder `$XDG_CONFIG_HOME/git`, give
# it the name `log.conf` and include it in _Git's_ global configuration
# file `$XDG_CONFIG_HOME/git/config` (symbolic link to `global.conf`).
#
# See also:
#   * man:git-log[1]
#   * man:git-config[1]

# Note:
#
#   * When defining aliases all command options must be specified in
#     their long form such that users can understand them even after a
#     long time.
#
#   * Only define aliases for the most common use cases and in this
#     context also only with the most frequently used command options.
#
[alias]

  l = log

  # Log commits after date, no merge commits.
  #
  la = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --after=\"${1:-today}\" --no-merges --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits before date, no merge commits.
  #
  lb = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --before=\"${1:-today}\" --no-merges --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits of author (self), no merge commits.
  #
  lc = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --author=\"${1:-$(git config user.email)}\" --no-merges --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits of committer (self), no merge commits.
  #
  lcc = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --committer=\"${1:-$(git config user.email)}\" --no-merges --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits touching file.
  #
  lf = "!fn() { cd \"${GIT_PREFIX:-.}\"; git log --follow --oneline --decorate=auto \"${1:-HEAD}\" -- \"$2\"; }; fn"

  # Log commits whose messages match fixed string, ingoring case.
  #
  lg = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --grep=\"$1\" --fixed-strings --regexp-ignore-case --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits whose diff match fixed string, ignoring case.
  #
  lgd = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log -G\"$1\" --regexp-ignore-case --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits whose messages match extended regular expression,
  # ignoring case.
  #
  lge = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --grep=\"$1\" --extended-regexp --regexp-ignore-case --oneline --decorate=auto \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits whose messages match Perl regular expression, ignoring
  # case.
  #
  lgp = "!fn() { local -ar paths=(\"${@:3}\"); cd \"${GIT_PREFIX:-.}\"; git log --grep=\"$1\" --perl-regexp --regexp-ignore-case --oneline --decorate \"${2:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits with their relations visualized as graph on left margin.
  #
  ll = log --graph --oneline

  # Log commits of main branch (first parent), not those of side
  # branches.
  #
  lm = "!fn() { local -ar paths=(\"$@\"); cd \"${GIT_PREFIX:-.}\"; git log --first-parent --oneline --decorate=auto \"${1:-HEAD}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log commits of main branch (first parent) ahead of upstream branch,
  # not those of side branches.
  #
  lmu = "!fn() { local -ar paths=(\"${@:2}\"); cd \"${GIT_PREFIX:-.}\"; git log --first-parent --oneline --decorate=auto \"${1:-}@{upstream}..${1:-}\" -- \"${paths[@]:-.}\"; }; fn"

  # Log nth (commit).
  #
  ln = log --max-count=1 --format=fuller --use-mailmap

  # Log nth changes.
  #
  lnc = log --max-count=1 --oneline --name-status

  # Log nth statistics.
  #
  lns = log --max-count=1 --oneline --stat

  # Log nth commit's cryptograhpic signature.
  #
  lnv = log --max-count=1 --oneline --show-signature

  # Log commits of branch ahead of upstream branch, no merge commits.
  #
  lu = "!fn() { local -ar paths=(\"${@:2}\"); cd \"${GIT_PREFIX:-.}\"; git log --no-merges --oneline --decorate=auto \"${1:-}@{upstream}..${1:-}\" -- \"${paths[@]:-.}\"; }; fn"
