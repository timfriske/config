# = Git Rebase's global configuration
# Tim Friske <me@tifr.de>
#
# Configures the `git-rebase` command of _Git_.
#
# _Git_ is a _DVCS_ _Distributed Version Control System_ which manages
# snapshots of a file system tree once the tree's nodes are put under
# _Git's_ control.
#
# It is recommended to copy this file into the folder `global.d/command`
# underneath _Git's_ configuration folder `$XDG_CONFIG_HOME/git`, give
# it the name `rebase.conf` and include it in _Git's_ global
# configuration file `$XDG_CONFIG_HOME/git/config` (symbolic link to
# `global.conf`).
#
# See also:
#   * man:git-rebase[1]
#   * man:git-config[1]

# Note:
#
#   * When defining aliases all command options must be specified in
#     their long form such that users can understand them even after a
#     long time.
#
#   * Only define aliases for the most common use cases and in this
#     context also only with the most frequently used command options.
#
#   * In order to safeguard against accidentally dropping commits during
#     an interactive rebase by deleting their lines from the todo list
#     _Git's_ variable `rebase.missingCommitsCheck` should be configured
#     and set to `error`.  Instead prefix each commit that should be
#     removed with the action word `drop` in the todo list.
#
#   * When you start over an unsuccessful rebase you would normally have
#     to resolve the same conflicts all over again.  In order to save
#     you this hassle you should enable _Git's_ _Reuse Recorded
#     Resolution_ cache with the variable `rerere.enabled` set to
#     `true`.  By doing so, once manually solved conflict resolutions
#     will be automatically reapplied the next time during conflicted
#     rebases and merges, saving you time.
#
[alias]

  r = rebase

  ra = rebase --abort
