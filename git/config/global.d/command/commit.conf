# = Git Commit's global configuration
# Tim Friske <me@tifr.de>
#
# Configures the `git-commit` command of _Git_.
#
# _Git_ is a _DVCS_ _Distributed Version Control System_ which manages
# snapshots of a file system tree once the tree's nodes are put under
# _Git's_ control.
#
# It is recommended to copy this file into the folder `global.d/command`
# underneath _Git's_ configuration folder `$XDG_CONFIG_HOME/git`, give
# it the name `commit.conf` and include it in _Git's_ global
# configuration file `$XDG_CONFIG_HOME/git/config` (symbolic link to
# `global.conf`).
#
# See also:
#   * man:git-commit[1]
#   * man:git-config[1]

# Note:
#
#   * When defining aliases all command options must be specified in
#     their long form such that users can understand them even after a
#     long time.
#
#   * Only define aliases for the most common use cases and in this
#     context also only with the most frequently used command options.
#
#   * Use _Git's_ _Add_ command to incrementally add changes from the
#     working tree to the index before committing all staged changes.
#
#   * Use _Git's_ _Reset_ command to incrementally remove changes from
#     the index but not the working tree before committing all staged
#     changes.
#
#   * Use _Git's_ _Rm_ command to incrementally remove files from the
#     working tree and index before committing all staged changes.
#
#   * Don't directly or interactively commit unstaged changes.  Use
#     _Git's_ commands _Add_, _Reset_ and _Rm_ to stage or unstage
#     changes before commiting these.  This rules out the use of _Git_
#     _Commit's_ options `all`, `interactive` and `path` respectively
#     and hereby also its options `include` and `only` as well as any
#     path arguments.
#
#   * Don't list the paths of files with changes that would be
#     committed.  Use _Git's_ _Status_ command for this instead.  It's
#     recommended to have the file paths included in a text editor for
#     reference while editing the message of a commit with _Git's_
#     variable `commit.status` set to `true`.  This rules out the use of
#     _Git_ _Commit's_ option `dry-run` and hereby also its options
#     `short`, `branch`, `porcelain`, `long` and `null`.
#
#   * Don't specify the `verbose` option on the command line.  It's
#     standard behavior should be configured with _Git's_ variable
#     `commit.verbose` set to `1`.
#
#   * Don't specify the `status` option or its inverse option on the
#     command line.  It's standard behavior should be configured with
#     _Git's_ variable `commit.status` set to `true`.
#
#   * Don't specify the `cleanup` option on the command line.  It's
#     standard behavior should be configured with _Git's_ variable
#     `commit.cleanup` set to `default`.
#
#   * Don't specify the `untracked-files` option on the command line.
#     It's standard behavior should be configured with _Git's variable
#     `status.showUntrackedFiles` set to `normal`.
#
#   * Don't specify the `gpg-sign` or its inverse option on the command
#     line.  It's standard behavior should be configured with _Git's_
#     variables `commit.gpgSign` set to `false` and `user.signingKey`
#     set to the user's _OpenPGP_ fingerprint (with `!` appended) of
#     her/his signing key.  The rationale behind these settings is to
#     sign tags and merge them with their signatures embedded into the
#     merge commits but is *not* to sign each and every regular commit.
#
#   * Make _Git_ _Commit's_ sign-off behavior configurable by
#     introducing the environment variable `GIT_X_SIGNOFF`.  Set this
#     variable to `--signoff` to enable this behavior; set it to the
#     empty string or unset it to disable this behavior again.
#
[alias]

  c = commit

  cae = "!fn() { git commit --amend --edit $GIT_X_SIGNOFF \"$@\"; }; fn"

  caen = "!fn() { commit --amend --no-edit $GIT_X_SIGNOFF \"$@\"; }; fn"

  ce = "!fn() { commit --edit $GIT_X_SIGNOFF \"$@\"; }; fn"

  cec = "!fn() { git commit --edit --reedit-message=\"${1:-HEAD}\" $GIT_X_SIGNOFF --reset-author \"${@:2}\"; }; fn"

  cecn = "!fn() { git commit --no-edit --reuse-message=\"${1:-HEAD}\" $GIT_X_SIGNOFF --reset-author \"${@:2}\"; }; fn"

  cfe = "!fn() { git commit --fixup=\"${1:-HEAD~1}\" --edit $GIT_X_SIGNOFF \"${@:2}\"; }; fn"

  cfen = "!fn() { git commit --fixup=\"${1:-HEAD~1}\" --no-edit $GIT_X_SIGNOFF \"${@:2}\"; }; fn"

  cqe = "!fn() { git commit --squash=\"${1:-HEAD~1}\" --edit --reedit-message=\"${2:-${1:-HEAD~1}}\" $GIT_X_SIGNOFF --reset-author \"${@:3}\"; }; fn"

  cqen = "!fn() { git commit --squash=\"${1:-HEAD~1}\" --no-edit --reuse-message=\"${2:-${1:-HEAD~1}}\" $GIT_X_SIGNOFF --reset-author \"${@:3}\"; }; fn"
