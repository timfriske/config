# = Configuration of OpenSSH SSH client
# Tim Friske <me@tifr.de>
#
# Configures the _OpenSSH_ _SSH_ _Secure SHell_ client.
#
# The _SSH_ client program obtains its configuration from the below
# sources in the following order:
#
#   . Command line options.
#
#   . User configuration file (`~/.ssh/config`).
#
#   . System configuration file (`/etc/ssh/ssh_config`).
#
# For each setting only the first encountered value will be used.  The
# configuration files contain sections separated by `Host` name patterns
# and a setting from that section with a pattern which best matches a
# given host is chosen.  The host name is usually given on the command
# line (see the `CanonicalizeHostname` option for exceptions).
#
# Since only the first obtained value for each setting is used, sections
# with more host-specific patterns must come before ones with less
# specific patterns.  The most general section `Host *`, i.e. the one
# with the least host-specific pattern, must be the last section of this
# configuration file.
#
# Important note: With regards to security sensitive settings this
# configuration file mainly follows the advices given by the
# https://infosec.mozilla.org/guidelines/openssh[Mozilla Security
# Guidelines for OpenSSH].  For details on choosing safe curves for
# elliptic-curve cryptography see https://safecurves.cr.yp.to[Safe
# Curves].

# The default host section must be defined at the end of this
# configuration file in order to not overrule the settings from more
# host-specific sections.  Further host sections may be defined with
# more specific sections listed before less specific sections from top
# to bottom.
#
Host *

  # Make known hosts, i.e. their DNS names and IP adresses, unreadable
  # by letting _SSH_ remember them in their hashed form only.  This
  # prevents others from getting to know the hosts the user tried to
  # connect to and potentially has access to.
  #
  # Important note: Hosts that were known before hashing known hosts
  # will not be retroactively replaced by their hashed form.  For _SSH_
  # to remember them in their hashed form too run `ssh-keygen -H`.
  #
  # Default: HashKnownHosts no
  #
  HashKnownHosts yes

  # Specify the order of authentication methods in which the client
  # should try to authenticate against a server in the order from most
  # to least preferred.
  #
  # Since public-key authentication is one of the most secure methods it
  # should be tried first if supported by the server.  If combined with
  # multifactor authentication (`keyboard-interactive`) it is the most
  # secure authentication method one can think of.
  #
  # Host-based authentication is considered to be less frequently used
  # than public-key or multifactor authentication but still more
  # frequently used than the _GSSAPI_ _General Security Services API_
  # (e.g. via _Kerberos_).
  #
  # Password-based authentication on the other hand, if used alone, i.e.
  # if not part of a multifactor authentication, is considered the least
  # secure method considering weak passwords and brute-force dictionary
  # attacks.
  #
  # Run `ssh -Q cipher-auth` to list the currently supported
  # authentication methods.
  #
  # Default: PreferredAuthentications \
  #   gssapi-with-mic,\
  #   hostbased,\
  #   publickey,\
  #   keyboard-interactive,\
  #   password
  PreferredAuthentications publickey,keyboard-interactive,hostbased,gssapi-with-mic,password

  # Allow only the safest host key algorithms to be used in the order
  # from safest to less safe but still acceptable.  Leave out any weak
  # or untrusted algorithms.
  #
  # Run `ssh -Q key` to list the currently supported host key
  # algorithms.
  #
  # Default: HostKeyAlgorithms \
  #   ecdsa-sha2-nistp256-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp384-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp521-cert-v01@openssh.com,\
  #   ssh-ed25519-cert-v01@openssh.com,\
  #   ssh-rsa-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp256,\
  #   ecdsa-sha2-nistp384,\
  #   ecdsa-sha2-nistp521,\
  #   ssh-ed25519,\
  #   ssh-rsa
  #
  HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa

  # Allow only the safest key exchange algorithms to be used in the
  # order from safest to less safe but still acceptable.  Leave out any
  # weak or untrusted algorithms.
  #
  # Run `ssh -Q kex` to list the currently supported key exchange
  # algorithms.
  #
  #
  # Default: KexAlgorithms \
  #   curve25519-sha256,\
  #   curve25519-sha256@libssh.org,\
  #   ecdh-sha2-nistp256,\
  #   ecdh-sha2-nistp384,\
  #   ecdh-sha2-nistp521,\
  #   diffie-hellman-group-exchange-sha256,\
  #   diffie-hellman-group16-sha512,\
  #   diffie-hellman-group18-sha512,\
  #   diffie-hellman-group-exchange-sha1,\
  #   diffie-hellman-group14-sha256,\
  #   diffie-hellman-group14-sha1
  #
  KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256

  # Allow only the safest _MAC_ _Message Authentication Code_ algorithms
  # to be used in the order from safest to less safe but still
  # acceptable.  Leave out any weak or untrusted algorithms.
  #
  # Run `ssh -Q mac` to list the currently supported _MAC_ algorithms.
  #
  # Default: MACs \
  #  umac-64-etm@openssh.com,\
  #  umac-128-etm@openssh.com,\
  #  hmac-sha2-256-etm@openssh.com,\
  #  hmac-sha2-512-etm@openssh.com,\
  #  hmac-sha1-etm@openssh.com,\
  #  umac-64@openssh.com,\
  #  umac-128@openssh.com,\
  #  hmac-sha2-256,\
  #  hmac-sha2-512,\
  #  hmac-sha1
  #
  MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
