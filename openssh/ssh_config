# = Configuration of OpenSSH SSH client
# Tim Friske <me@tifr.de>
#
# Configures the _OpenSSH_ _SSH_ _Secure SHell_ client.
#
# Empty lines are ignored but may be used to divide the content of this
# configuration file into logical blocks.  Lines whose first
# non-whitespace character is the `#` hash sign are ignored but may be
# used as comments.
#
# The _SSH_ client program obtains its configuration from the below
# sources in the following order:
#
#   . Command line options.
#
#   . User configuration file (`~/.ssh/config`).
#
#   . System configuration file (`/etc/ssh/ssh_config`).
#
# The configuration file is divided into sections.  Each section starts
# with a `Match` or `Host` expression that ends at the next section or
# global section at the end of file.  A section defines the settings
# specific to that one.
#
# For each setting only the one of the first matching section in the
# direction from top to bottom is applied.  Therefore more specific
# sections must be defined before less specific ones for their settings
# to become effective.
#
# Fallback settings may be defined in either the global section `Match
# all` or `Host *`.  Such a setting becomes effective if no setting was
# found in a more specific section.  The global section must be defined
# at the end of this file.
#
# Important note: With regards to security sensitive settings this
# configuration file mainly follows the advices given by the
# https://infosec.mozilla.org/guidelines/openssh[Mozilla Security
# Guidelines for OpenSSH].  For details on choosing safe curves for
# elliptic-curve cryptography see https://safecurves.cr.yp.to[Safe
# Curves].

# The global section must be defined at the end of this file in order to
# not overrule settings from more specific sections.
#
Host *

  # Enable automatic sharing of multiple _SSH_ sessions over a single
  # network connection to a remote host.
  #
  # Try to reuse an already existing connection.  If there is none
  # establish a new one.  Keep the connection open for the given
  # duration after the last _SSH_ session was closed just in case a new
  # session is opened during that time in order to prevent too many new
  # connections.
  #
  # A connection can only be reused for logging in with the same remote
  # user to the same remote host and on the same remote port.  This is
  # why it is necessary to include that information in the file name of
  # each socket file.
  #
  # Default: ControlMaster no
  #
  # Default: ControlPath none
  #
  # Default: ControlPersist no
  #
  ControlMaster auto
  ControlPath ~/.ssh/%r-%h-%p.socket
  ControlPersist 30m

  # Allow only the safest key exchange algorithms to be used in the
  # order from safest to less safe but still acceptable.  Leave out any
  # weak or untrusted algorithms.
  #
  # Run `ssh -Q kex` to list the currently supported key exchange
  # algorithms.
  #
  # Consider the minimum accepted bit length of 1024 bits in RFC-4419
  # mode for the _DH group_ parameter `p` as insecure.  Raise the
  # minimum to 2048 bits which corresponds to the minimum bit length in
  # FIPS mode.
  #
  # Default: KexAlgorithms \
  #   curve25519-sha256,\
  #   curve25519-sha256@libssh.org,\
  #   ecdh-sha2-nistp256,\
  #   ecdh-sha2-nistp384,\
  #   ecdh-sha2-nistp521,\
  #   diffie-hellman-group-exchange-sha256,\
  #   diffie-hellman-group16-sha512,\
  #   diffie-hellman-group18-sha512,\
  #   diffie-hellman-group-exchange-sha1,\
  #   diffie-hellman-group14-sha256,\
  #   diffie-hellman-group14-sha1
  #
  # Default: KexDHMin 1024 (insecure, RFC-4419 mode)
  # Default: KexDHMin 2048 (more secure, FIPS mode)
  #
  KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
  KexDHMin 2048

  # Allow only the safest host key algorithms to be used in the order
  # from safest to less safe but still acceptable.  Leave out any weak
  # or untrusted algorithms.
  #
  # Run `ssh -Q key` to list the currently supported host key
  # algorithms.
  #
  # Default: HostKeyAlgorithms \
  #   ecdsa-sha2-nistp256-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp384-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp521-cert-v01@openssh.com,\
  #   ssh-ed25519-cert-v01@openssh.com,\
  #   ssh-rsa-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp256,\
  #   ecdsa-sha2-nistp384,\
  #   ecdsa-sha2-nistp521,\
  #   ssh-ed25519,\
  #   ssh-rsa
  #
  HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa

  # Allow only the safest cipher algorithms to be used in the order from
  # safest to less safe but still acceptable.  Leave out any weak or
  # untrusted algorithms.
  #
  # Run `ssh -Q cipher` to list the currently supported cipher
  # algorithms.
  #
  # Default: Ciphers \
  #   chacha20-poly1305@openssh.com,\
  #   aes128-ctr,\
  #   aes192-ctr,\
  #   aes256-ctr,\
  #   aes128-gcm@openssh.com,\
  #   aes256-gcm@openssh.com,\
  #   aes128-cbc,\
  #   aes192-cbc,\
  #   aes256-cbc
  #
  Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

  # Allow only the safest _MAC_ _Message Authentication Code_ algorithms
  # to be used in the order from safest to less safe but still
  # acceptable.  Leave out any weak or untrusted algorithms.
  #
  # Run `ssh -Q mac` to list the currently supported _MAC_ algorithms.
  #
  # Default: MACs \
  #  umac-64-etm@openssh.com,\
  #  umac-128-etm@openssh.com,\
  #  hmac-sha2-256-etm@openssh.com,\
  #  hmac-sha2-512-etm@openssh.com,\
  #  hmac-sha1-etm@openssh.com,\
  #  umac-64@openssh.com,\
  #  umac-128@openssh.com,\
  #  hmac-sha2-256,\
  #  hmac-sha2-512,\
  #  hmac-sha1
  #
  MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com

  # Make known hosts unreadable, i.e. their _DNS_ names and _IP_
  # addresses, by letting _SSH_ remember them in their hashed form only.
  # This prevents others from getting to know the hosts the user tried
  # to connect to and potentially has access to.
  #
  # Important note: Hosts that were stored in plaintext will not be
  # automatically replaced by their hash values with the option
  # `HashKnownHosts` set to `yes`.  In order convert and store them in
  # their hashed form run `ssh-keygen -H` once manually.
  #
  # Default: HashKnownHosts no
  #
  HashKnownHosts yes

  # Specify the order of authentication methods in which the client
  # should try to authenticate against a server in the order from most
  # to least preferred.
  #
  # Since public-key authentication is one of the most secure methods it
  # should be tried first if supported by the server.  If combined with
  # multifactor authentication (`keyboard-interactive`) it is the most
  # secure authentication method one can think of.
  #
  # Host-based authentication is considered to be less frequently used
  # than public-key or multifactor authentication but still more
  # frequently used than the _GSSAPI_ _General Security Services API_
  # (e.g. via _Kerberos_).
  #
  # Password-based authentication on the other hand, if used alone, i.e.
  # if not part of a multifactor authentication, is considered the least
  # secure method considering weak passwords and brute-force dictionary
  # attacks.
  #
  # Run `ssh -Q cipher-auth` to list the currently supported
  # authentication methods.
  #
  # Default: PreferredAuthentications \
  #   gssapi-with-mic,\
  #   hostbased,\
  #   publickey,\
  #   keyboard-interactive,\
  #   password
  PreferredAuthentications publickey,keyboard-interactive,hostbased,gssapi-with-mic,password

  # Allow only the safest public key algorithms to be used in the order
  # from safest to less safe but still acceptable.  Leave out any weak
  # or untrusted algorithms.
  #
  # Run `ssh -Q key` to list the currently supported host key
  # algorithms.
  #
  # Default: PubkeyAcceptedKeyTypes \
  #   ecdsa-sha2-nistp256-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp384-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp521-cert-v01@openssh.com,\
  #   ssh-ed25519-cert-v01@openssh.com,\
  #   ssh-rsa-cert-v01@openssh.com,\
  #   ecdsa-sha2-nistp256,\
  #   ecdsa-sha2-nistp384,\
  #   ecdsa-sha2-nistp521,\
  #   ssh-ed25519,\
  #   ssh-rsa
  #
  PubkeyAcceptedKeyTypes ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa

  # Try to authenticate with the least number of private keys in order
  # to keep below the maximum number of authentication tries a _SSH_
  # daemon permits.
  #
  # Only offer those private keys to a _SSH_ daemon for authentication
  # whose public keys are explicitly listed in the user configuration
  # file of _OpenSSH's_ client.
  #
  # In case the user is only using one private key to authenticate
  # against all remote hosts s/he must list the public key file of the
  # private key in the global section of her/his _OpenSSH_ client
  # configuration file (`~/.ssh/config`) with the `IdentityFile` option
  # as follows:
  #
  # .The only _SSH_ key for all hosts
  # ----
  # Host *
  #   IdentityFile ~/.ssh/id_ed25519.pub
  # ----
  #
  # Otherwise if using multiple private keys for authenticating against
  # different remote hosts the user must list the correct public key
  # file for each host separately but *not* for all hosts in the global
  # section:
  #
  # .One _SSH_ key per host or group of hosts
  # ----
  # Host foobar foobar.example.com
  #   IdentityFile ~/.ssh/id_ed25519-foobar.pub
  #
  # Host *.galaxy.example.com
  #   IdentityFile ~/.ssh/id_ed25519-for-all-stars.pub
  # ----
  #
  # Default: IdentitiesOnly no
  #
  IdentitiesOnly yes

  # Add a private key to a running _SSH_ agent upon the first time it is
  # actually tried for authentication.  This is done for the user's
  # convenience by letting a _SSH_ agent cache the passphrases of the
  # just added private keys hereby alleviating the user from having to
  # enter their passphrases too often.
  #
  # Default: AddKeysToAgent no
  #
  AddKeysToAgent yes

  # Send the following trusted environment variables to a server making
  # them part of the user's login session if the server accepts them.
  #
  # The lanugage- and locale-specific environment variables let the user
  # continue to work on the server in her/his language and locale s/he
  # is already using on the client.
  #
  # The editor-specific environment variables let the user continue to
  # work on the server with her/his editors s/he is already using on the
  # client.
  #
  # Default: SendEnv <none>
  #
  # Language and locale:
  SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY
  SendEnv LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE
  SendEnv LC_MEASUREMENT LC_IDENTIFICATION LC_ALL
  # Editors:
  SendEnv EDITOR VISUAL
