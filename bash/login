# Startup file for Bash login shells
# ==================================
# Tim Friske <me@tifr.de>
#
# The _Bash_ _Bourne Again Shell_ reads and executes commands from its
# configuration files but only if these exist and are readable.  When
# started as a login shell it first reads its system-wide startup file
# `/etc/profile`.  It then continues to read the first of its user-
# specific startup files `~/.bash_profile`, `~/bash_login` and
# `~/.profile` it encounters in that order.  When a login shell is
# exited _Bash_ reads and executes commands from its user-specific
# shutdown file `~/.bash_logout`.
#
# This configuration file shall contain only non-default settings
# specific to login shells in order to keep it lean and thus easy to
# understand and maintain.  In case an interactive login shell is
# started this startup file shall read and execute the commands from
# _Bash's_ user-specific startup file for interactive shells, namely
# `~/.bashrc`.
#
# See also:
#   * man:bash[1]
#   * link:{system-home}/profile
#   * link:{user-home}/.bash_profile
#   * link:{user-home}/.bash_login
#   * link:{user-home}/.bash_logout
#   * link:{user-home}/.bashrc

# Environment variables
# ---------------------

# Set up the `PATH` environment variable.
#
source ~/.bash/login.d/path.bash

# Set up the _Bash_ prompt.
#
source ~/.bash/login.d/prompt.bash

# Set up the _Bash_ history.
#
source ~/.bash/login.d/history.bash

# Set up the programs to use.
#
source ~/.bash/login.d/program.bash

# Set up the _Diff_ program.
#
source ~/.bash/login.d/diff.bash

# Set up the _Grep_ program.
#
source ~/.bash/login.d/grep.bash

# Set up the _Less_ program.
#
source ~/.bash/login.d/less.bash

# Set up the _Cp_ program.
#
source ~/.bash/login.d/cp.bash

# Set up the _Ln_ program.
#
source ~/.bash/login.d/ln.bash

# Set up the _Mv_ program.
#
source ~/.bash/login.d/mv.bash

# Set up the _Rm_ program.
#
source ~/.bash/login.d/rm.bash

# Set up the _Mkdir_ program.
#
source ~/.bash/login.d/mkdir.bash

# Set up the _Rmdir_ program.
#
source ~/.bash/login.d/rmdir.bash

# Make listing directories with the _Ls_ program more pleasant by default in
# the following ways:
#
#   si::
#     Let _Ls_ display file sizes as human-readable numbers in powers of
#     1,000 with their units in the _SI_-system, the _International
#     System of Units_ (Système International (d'unités)), e.g. KB, MB,
#     TB etc.  The _SI_-system is also the system in which most storage
#     device capacities are advertised.
#
#   classify::
#     Let _Ls_ append an indicator sign to each type of file to help the
#     user identify its file type, e.g. `/` for directories or `*` for
#     executable files.
#
#   clolor=auto::
#     Let _Ls_ colorize its output if it goes to a terminal.
#
#   time-style::
#     Let _Ls_ display the date-time in ISO-8601 `long' format.  Due to
#     the format's fixed-width pattern `+%Y-%m-%d %H:%M` it should be
#     more readable and independent from the current locale.  With up to
#     the minute precision it should be good enough for everyday use.
#
#   group-directories-first::
#     Let _Ls_ list all directories before all other kinds of files,
#     e.g. regular files, symbolic links etc. because such directory
#     listings might be easier on the eye and therefore to comprehend.
#
export LS_X_OPTIONS=''
LS_X_OPTIONS+='--si '
LS_X_OPTIONS+='--classify '
LS_X_OPTIONS+='--color=auto '
LS_X_OPTIONS+='--time-style=long-iso '
LS_X_OPTIONS+='--group-directories-first '

# Make handling _TARs_ _tape archives_ with the _Tar_ program more
# pleasant by default in the following ways:
#
#   verbose::
#     Let _Tar_ report what it is doing.
#
export TAR_X_OPTIONS=''
TAR_X_OPTIONS+='--auto-compress '
TAR_X_OPTIONS+='--verbose '

# Make synchronizing large/many files and folders, i.e. by copying,
# moving and deleting them, with the _Rsync_ program more pleasant by
# default in the following ways:
#
# human-readable::
#   Let _Rsync_ output numbers, in a human-friendly format.  For example
#   thousands separators, units to the power of 1000, symbols for units
#   larger than 1000, etc.
#
# progress::
#   Let _Rsync_ report what it is doing on a per-file basis. See also
#   `info=progress2` option if you want to see statistics about the
#   transfer as a whole.
#
export RSYNC_X_OPTIONS=''
RSYNC_X_OPTIONS+='--human-readable '
RSYNC_X_OPTIONS+='--progress '

# Let _Git_ skip reading settings from its system-wide configuration
# file `{system-home}/gitconfig`.  Assume that the user is a power user
# of _Git_ and configured every aspect of it down to the smallest detail
# in her/his personal _Git_ configuration files.
#
export GIT_CONFIG_NOSYSTEM=true

# Add _Git's_ commit message footer line `Signed-off-by`.
#
export GIT_X_SIGNOFF='--signoff'

# 1. Allow user to select multiple _Git_ branches with _Fzf_.
# 2. Exit immediately if there is no matching _Git_ branch.
export FZF_GIT_BRANCH_FZF_OPTS='--multi --exit-0'

# 1. Allow user to select multiple _Git_ tags with _Fzf_.
# 2. Exit immediately if there is no matching _Git_ tag.
export FZF_GIT_TAG_FZF_OPTS='--multi --exit-0'

# 1. Allow user to select multiple jobs with _Fzf_.
# 2. Exit immediately if there is no matching job.
export FZF_JOBS_FZF_OPTS='--multi --exit-0'

# Test if login shell has startup file with local overrides.
if [[ -f ~/.bash_login.local && -r ~/.bash_login.local ]]; then
  # Read and execute commands from that startup file.
  source ~/.bash_login.local
fi

# Interactive login shells
# ------------------------

# Test if interactive shell and its startup file is readable.
if [[ "$-" == *i* && -f ~/.bashrc && -r ~/.bashrc ]]; then
  # Read and execute commands from its startup file.
  source ~/.bashrc
fi
