# Startup file for Bash interactive shells
# ========================================
# Tim Friske <me@tifr.de>
#
# The _Bash_ _Bourne Again Shell_ reads and executes commands from its
# configuration files but only if these exist and are readable.  When
# started as an interactive shell it first reads its system-wide startup
# file `/etc/bash.bashrc`.  It then continues to read its user-specific
# startup file `~/.bashrc`.
#
# This configuration file shall contain only non-default settings
# specific to interactive shells in order to keep it lean and thus easy
# to understand and maintain.  In case an interactive login shell is
# started this startup file shall be read and its commands executed by
# the first of _Bash's_ user-specific startup files for login shells
# that _Bash_ encounters, that is `~/.bash_profile`, `~/.bash_login` or
# `~/.profile`.
#
# See also:
#   * man:bash[1]
#   * link:{system-home}/bash.bashrc
#   * link:{user-home}/.bashrc
#   * link:{user-home}/.bash_profile
#   * link:{user-home}/.bash_login
#   * link:{user-home}/.profile

# Terminal settings
# -----------------

# Disable `CTRL-S` and `CTRL-Q` to stop and start terminal output
# because this function is not very useful and just confuses most users.
# The previously bound hot keys can be assigned new functions hereafter.
#
stty -ixon

# Shell options
# -------------

# Edit commands with Vi- instead of Emacs-like key bindings.
#
shopt -os vi

# Make it easy to name and navigate directories.
#
shopt -s autocd cdable_vars cdspell dirspell

# List any stopped and running jobs before exiting an interactive shell
# in order to not kill important jobs unintentionally but exit them
# manually, e.g. by saving their data first.  To list the remaining jobs
# is what most users would usually do if the shell they are about to
# exit reports that there are a number of stopped jobs.
#
shopt -s checkjobs

# Update window size after each command.
#
shopt -s checkwinsize

# Also store multi-line commands in history in case the user wants to
# adapt them later on, e.g. in case of syntax errors.
#
shopt -s cmdhist lithist

# Recognize extended set of patterns during pattern matching and path
# name expansion.
#
shopt -s extglob globstar

# Make command history more accessible.
#
shopt -s histappend histreedit histverify

# Don't overwrite files with `>` file redirection operator.  This
# setting may be overruled adhoc by using the `>|` operator.
#
shopt -os noclobber

# Attempt to complete commands once a non-empty prefix is given in order
# to not list the entire arsenal of commands but an already reduced list.
#
shopt -s no_empty_cmd_completion

# Ignore upper- and lower case during path name expansion and pattern
# matching.
#
shopt -s nocaseglob nocasematch

# Shell aliases
# -------------

# Bash
# ~~~~

# Show _Bash's_ version.
alias version='echo "bash version ${BASH_VERSION}"'

# Bind
# ~~~~

# List key bindings in Bash's vi-command mode excluding self-inserts.
alias vi-command='bind -m vi-command -p \
  | \grep --extended-regexp --invert-match "^#|self-insert$"'

# List all key bindings in Bash's vi-command mode.
alias vi-command-all='bind -m vi-command -p'

# List key bindings in Bash's vi-insert mode excluding self-inserts.
alias vi-insert='bind -m vi-insert -p \
  | \grep --extended-regexp --invert-match "^#|self-insert$"'

# List all key bindings in Bash's vi-insert mode.
alias vi-insert-all='bind -m vi-insert -p'

# Cd - Change Directory
# ~~~~~~~~~~~~~~~~~~~~~

# With the shell option `autocd` switched on executing `..` already
# changes to the parent directory.  
alias ..='cd ..'

# The alias `...` expands on the idea of `..` by making it possible to
# go up two directories at once.  More than two levels in one go would
# mean too much mental work to execute fast enough.
alias ...='cd ../..'

# Cp - Copy files & directories
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Define alias to call `cp` command with default options.
alias cp='cp ${CP_X_OPTIONS:-}'

# Ch(grp|mod|own) - Change file group, mode, owner
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Define alias to call `chgrp` command with default options.
alias chgrp='chgrp ${CHGRP_X_OPTIONS:-}'

# Define alias to call `chmod` command with default options.
alias chmod='chmod ${CHMOD_X_OPTIONS:-}'

# Define alias to call `chown` command with default options.
alias chown='chown ${CHOWN_X_OPTIONS:-}'

# D(f|u) - Disk free, usage
# ~~~~~~~~~~~~~~~~~~~~~~~~~

# Define alias to call `df` command with default options.
alias df='df ${DF_X_OPTIONS:-}'

# Define alias to call `du` command with default options.
alias du='du ${DU_X_OPTIONS:-}'

# Diff - Differences between files & directories
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Define alias to call `diff` command with default options.
alias diff='diff ${DIFF_X_OPTIONS:-}'

# Free - Free main memory and swap space
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Define alias to call `free` command with default options.
alias free='free ${FREE_X_OPTIONS:-}'

# Fzf - Fuzzy-search and select all kinds of items
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Test if fuzzy finder program _Fzf_ is installed.
#
if type -p fzf &> /dev/null; then

  # Test if _Fzf_ specific _Readline_ file is readable.
  #
  if [[ -f ~/.inputrc.fzf && -r ~/.inputrc.fzf ]]; then

    # Make _Fzf_ available through _Readline_ key bindings.
    #
    bind -f ~/.inputrc.fzf
  fi
  source fzf-insert.bash &> /dev/null
  if source fzf-files.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-af": "fzf_files"'
    bind -m vi-command '"\C-af": "i\C-af"'
  fi
  if source fzf-folders.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-ad": "fzf_folders"'
    bind -m vi-command '"\C-ad": "i\C-ad"'
  fi
  if type -p fzf-git-branch &> /dev/null; then
    bind -m vi-insert -x '"\C-gb": "fzf-git-branch"'
    bind -m vi-command '"\C-gb": "i\C-gb"'
    bind -m vi-insert -x \
      '"\C-gr": "branch_opts=--remotes fzf-git-branch"'
    bind -m vi-command '"\C-gr": "i\C-gr"'
  fi
  if source fzf-git-branch-insert.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-ab": "fzf_git_branch_insert"'
    bind -m vi-command '"\C-ab": "i\C-ab"'
    bind -m vi-insert -x \
      '"\C-ar": "branch_opts=--remotes fzf_git_branch_insert"'
    bind -m vi-command '"\C-ar": "i\C-ar"'
  fi
  if type -p fzf-git-tag &> /dev/null; then
    bind -m vi-insert -x '"\C-gt": "fzf-git-tag"'
    bind -m vi-command '"\C-gt": "i\C-gt"'
  fi
  if source fzf-git-tag-insert.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-at": "fzf_git_tag_insert"'
    bind -m vi-command '"\C-at": "i\C-at"'
  fi
fi

# Grep - Search files for content
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Call `grep` with default options.
#
alias grep='grep $GREP_X_OPTIONS'

alias egrep='grep --extended-regexp'
alias fgrep='grep --fixed-strings'

# Info - View documentation about operating system and programs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias info='info --vi-keys'

# Jobs - Management of processes in foreground and background
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type -p fzf fzf-jobs &> /dev/null; then
  function jb {
    eval "$(jobs | cmd='bg' fzf-jobs "$@")"
  }

  function jd {
    eval "$(jobs | cmd='disown' fzf-jobs "$@")"
  }

  function jdh {
    eval "$(jobs | cmd='disown -h' fzf-jobs "$@")"
  }

  function jf {
    eval "$(jobs | cmd='fg' fzf-jobs "$@")"
  }

  function jj {
    eval "$(jobs | cmd='jobs' fzf-jobs "$@")"
  }

  function jkc {
    eval "$(jobs | cmd='kill -SIGCONT' fzf-jobs "$@")"
  }

  function jkk {
    eval "$(jobs | cmd='kill -SIGKILL' fzf-jobs "$@")"
  }

  function jkt {
    eval "$(jobs | cmd='kill -SIGTERM' fzf-jobs "$@")"
  }
else
  alias jb='bg'
  alias jd='disown'
  alias jdh='disown -h'
  alias jf='fg'
  alias jj='jobs'
  alias jkc='kill -SIGCONT'
  alias jkk='kill -SIGKILL'
  alias jkt='kill -SIGTERM'
fi

# Ln - Create hard and soft links to files and folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias ln='ln $LN_X_OPTIONS'

# Mkdir - Create folders
# ~~~~~~~~~~~~~~~~~~~~~~

alias mkdir='mkdir $MKDIR_X_OPTIONS'
alias md='mkdir'

# Mv - Move/rename files and folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias mv='mv $MV_X_OPTIONS'

# Rm - Delete files and non-empty folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rm='rm $RM_X_OPTIONS'
alias rr='rm --recursive'
alias rrf='rr --force'

# Rmdir - Delete empty folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rmdir='rmdir $RMDIR_X_OPTIONS'
alias rd='rmdir'

# Rsync - Synchronize file system trees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rsync='rsync $RSYNC_X_OPTIONS'

# Sed - Edit streams of text
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

alias sed='sed $SED_X_OPTIONS'

# Sudo - Execute programs as another user
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Make _Sudo_ also work with aliases.
alias sudo='sudo '

# Xdg-open - Open files and folders w/ appropriate programs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type -p xdg-open &> /dev/null; then
  alias open='xdg-open'
fi

for script in $(shopt -s globstar; \
    printf '%s\n' ~/.bash/rc.d/alias/**/*.bash); do
  source "$script"
done
unset script

# Test if interactive shell has startup file with local overrides.
if [[ -f ~/.bashrc.local && -r ~/.bashrc.local ]]; then
  # Read and execute commands from that startup file.
  source ~/.bashrc.local
fi

# Test if _GnuPG_ for encrypting and signing data is installed.
if type -p gpg &> /dev/null; then
  # Let _GnuPG_ know on which terminal to interact with the user; for
  # example the _Gpg-agent_ daemon prompting for the passphrase.
  export GPG_TTY="$(tty)"
  echo UPDATESTARTUPTTY | gpg-connect-agent &> /dev/null
fi

# Test if neither a _Tmux_ nor _Screen_ nor _SSH_ session from
# `localhost` is running.
if ! [[ -n "$TMUX" || "$TERM" =~ screen
    || "$SSH_CONNECTION" =~ ^::1|^127\.0\.0\.1 ]]; then
  # Test if _Tmux_ is on the `$PATH`.
  if type -p tmux &> /dev/null; then
    # Try to attach to latest unattached session or start a new one.
    { tmux attach-session || tmux new-session; } &> /dev/null
  fi
fi
