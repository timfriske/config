# Startup file for Bash login shells
# ==================================
# Tim Friske <me@tifr.de>
#
# The _Bash_ _Bourne Again Shell_ reads and executes commands from its
# configuration files but only if these exist and are readable.  When
# started as a login shell it first reads its system-wide startup file
# `/etc/profile`.  It then continues to read the first of its user-
# specific startup files `~/.bash_profile`, `~/bash_login` and
# `~/.profile` it encounters in that order.  When a login shell is
# exited _Bash_ reads and executes commands from its user-specific
# shutdown file `~/.bash_logout`.
#
# This configuration file shall contain only non-default settings
# specific to login shells in order to keep it lean and thus easy to
# understand and maintain.  In case an interactive login shell is
# started this startup file shall read and execute the commands from
# _Bash's_ user-specific startup file for interactive shells, namely
# `~/.bashrc`.
#
# See also:
#   * man:bash[1]
#   * link:{system-home}/profile
#   * link:{user-home}/.bash_profile
#   * link:{user-home}/.bash_login
#   * link:{user-home}/.bash_logout
#   * link:{user-home}/.bashrc

# Environment variables
# ---------------------

# Find folders to search for binaries and scripts to source.
#
declare _path=''
declare _path_real=''
declare -a _paths=()
declare -A _paths_real=()
# Use _Bash's_ brace expansion for brevity.
for _path in {/usr/{local/,},/}{,s}bin "$HOME"/{.local/,}bin; do
  if [[ -d "$_path" ]]; then
    # Resolve symlinks in path.
    _path_real="$(cd "$_path" && pwd -P)"
    # Add path only if not already added.
    if [[ ! -n "${_paths_real[$_path_real]+x}" ]]; then
      _paths_real["$_path_real"]+=''
      _paths+=("$_path")
    fi
  fi
done
# 1. Print array of paths as colon-separated list.
# 2. Replace `HOME` directory path with shorter tilde sign.
export PATH="$(IFS=':'; printf '%s' "${_paths[*]/#"$HOME"/'~'}")"
unset _path _paths _path_real _paths_real

# Save space for the actual command line by showing only the trailing
# number of path components of the working directory in the command
# prompt.  The rest of the path is represented by an ellipsis.
#
export PROMPT_DIRTRIM=3

# Remember up to 100,000 commands in memory and on disk.  Record the
# time when each command entered history as an ISO-8601 timestamp.
# Exclude commands starting with whitespace from history.  Erase all
# duplicate commands from history before the same command is appended
# again.
#
# By enabling the `$HISTCONTROL` option `erasedups` the history is kept
# free from duplicate commands which would otherwise clutter up the
# history.  With this option enabled the `$HISTIGNORE` list of command
# patterns to ignore becomes less useful because trivial commands such
# as `cd`, `ls`, etc. which the user would usually want to be excluded
# now appear at most once in the history.  Exlcluding any command from
# history would actually complicate recalling past commands because the
# user had to think twice whether a command really entered the history.
# Therefore the `$HISTIGNORE` variable should be left unspecified.
#
export HISTSIZE=100000
export HISTFILESIZE="$HISTSIZE"
export HISTTIMEFORMAT='%Y-%m-%d %H:%M:%S '
export HISTCONTROL='ignorespace:erasedups'
###export HISTIGNORE=''
###HISTIGNORE+='+([[:alnum:]])*([[:space:]])'

# Tell programs to open files in favorite text editor _Vim_ _Vi
# Improved_.  Don't care about line-oriented vs. visual editors just
# assign both `$EDITOR` and `$VISUAL` the same editor.
#
export EDITOR='vim'
export VISUAL='vim'

# Tell programs to open files in favorite pager _Less_.
#
export PAGER='less'

# Make comparing differences between files and directories with the
# _Diff_ program more pleasant by default in the following ways:
#
#  unified::
#    output NUMBER (3) lines above and below a diff hunk in the
#    `unified' diff format.  This format is more readable than _Diff's_
#    default `normal' format.  The `unified' format is also the default
#    format used by _Git_.
#
#  ignore-tab-expansion::
#  ignore-space-change::
#  ignore-trailing-space::
#  ignore-blank-lines::
#  ignore-all-space::
#    Don't get distracted from any kind of changes in whitespace.
#    Whitespace usually doesn't change the meaning of the content of a
#    file for most file formats.
#
#  color=auto::
#    If _Diff_ output is to a terminal colorize it.
#
export DIFF_X_OPTIONS=''
DIFF_X_OPTIONS+='--unified '
DIFF_X_OPTIONS+='--ignore-tab-expansion '
DIFF_X_OPTIONS+='--ignore-space-change '
DIFF_X_OPTIONS+='--ignore-trailing-space '
DIFF_X_OPTIONS+='--ignore-blank-lines '
DIFF_X_OPTIONS+='--ignore-all-space '
DIFF_X_OPTIONS+='--color=auto '

# Make full-text searches with the _Grep_ program more pleasant by
# default in the following ways:
#
#   directories=recurse::
#     If given no files search all files in the current directory and
#     below in a recursive manner.  Otherwise _Grep_ would read from
#     standard input or if given a directory tell the user that it is
#     one.  _Grep's_ default behavior is simply not what users most
#     likely expect it to be.
#
#   binary-file=without-match::
#     If _Grep_ encounters binary files just ignore them.
#
#   devices=skip::
#     If _Grep_ encounters devices just ignore them.
#
#   color=auto::
#     If _Grep_ output is to a terminal colorize it.
#
export GREP_X_OPTIONS=''
GREP_X_OPTIONS+='--directories=recurse '
GREP_X_OPTIONS+='--binary-files=without-match '
GREP_X_OPTIONS+='--devices=skip '
GREP_X_OPTIONS+='--color=auto '

# Make paging with the _Less_ program more pleasant by default in the
# following ways:
#
#   no-init::
#     Prevent _Less_ from clearing the terminal screen when it quits.
#     This way the user has a chance to refer to the last screen full of
#     output even after _Less_ exited.
#
#   tabs=4::
#     Let _Less_ display each tabulator four spaces wide in order to let
#     its output consume less space on the screen.
#
#   LONG-PROMPT::
#     Let _Less_ to prompt even more verbosely than _More_.
#
#   ignore-case::
#     Let _Less_ search smarter by ignoring the case if the pattern
#     consists of lower-case characters only.  Let it perform a case-
#     sensitive search if the pattern contains upper-case characters.
#
#   jump-target=.5::
#     Let _Less_ position the next or previous line that matches a
#     search pattern in the center of the terminal screen.  This should
#     give the user enough context, i.e. lines surrounding that line.
#
#   hilite-unread::
#     Let _Less_ give the user visual guidance as to where s/he left off
#     reading after paging through a screen worth of output.
#
#   RAW-CONTROL-CHARS::
#     Let _Less_ output colors and escape the rest of `raw' control
#     characters in order to not mess up the terminal screen.
#
#   chop-long-lines::
#     Let _Less_ truncate overlong lines to the left and right but make
#     them horizontally scrollable instead.  Line wrapping works well
#     with continuous text such as text in paragraphs of text documents
#     but breaks structured text such as text arranged in table columns.
#
#   quit-if-one-screen::
#     Let _Less_ display automatically quit itself if there is less than
#     a screen full of output to display.  Don't let the user have to do
#     that every time.
#
export LESS=''
LESS+='--no-init '
LESS+='--tabs=4 '
LESS+='--LONG-PROMPT '
LESS+='--ignore-case '
LESS+='--jump-target=.5 '
LESS+='--hilite-unread '
LESS+='--RAW-CONTROL-CHARS '
LESS+='--chop-long-lines '
LESS+='--quit-if-one-screen '

export SYSTEMD_LESS="$LESS"

# Make copying files and folders with the _Cp_ program more pleasant by
# default in the following ways:
#
# interactive::
#   Let _Cp_ prompt before overwriting.
#
# verbose::
#   Let _Cp_ report what it is doing.
#
export CP_X_OPTIONS=''
CP_X_OPTIONS+='--interactive '
CP_X_OPTIONS+='--verbose '

# Make linking files and folders with the _Ln_ program more pleasant by
# default in the following ways:
#
# interactive::
#   Let _Ln_ prompt before overwriting.
#
# verbose::
#   Let _Ln_ report what it is doing.
#
export LN_X_OPTIONS=''
LN_X_OPTIONS+='--interactive '
LN_X_OPTIONS+='--verbose '

# Make moving files and folders with the _Mv_ program more pleasant by
# default in the following ways:
#
# interactive::
#   Let _Mv_ prompt before overwriting.
#
# verbose::
#   Let _Mv_ report what it is doing.
#
export MV_X_OPTIONS=''
MV_X_OPTIONS+='--interactive '
MV_X_OPTIONS+='--verbose '

# Make listing directories with the _Ls_ program more pleasant by default in
# the following ways:
#
#   si::
#     Let _Ls_ display file sizes as human-readable numbers in powers of
#     1,000 with their units in the _SI_-system, the _International
#     System of Units_ (Système International (d'unités)), e.g. KB, MB,
#     TB etc.  The _SI_-system is also the system in which most storage
#     device capacities are advertised.
#
#   classify::
#     Let _Ls_ append an indicator sign to each type of file to help the
#     user identify its file type, e.g. `/` for directories or `*` for
#     executable files.
#
#   clolor=auto::
#     Let _Ls_ colorize its output if it goes to a terminal.
#
#   time-style::
#     Let _Ls_ display the date-time in ISO-8601 `long' format.  Due to
#     the format's fixed-width pattern `+%Y-%m-%d %H:%M` it should be
#     more readable and independent from the current locale.  With up to
#     the minute precision it should be good enough for everyday use.
#
#   group-directories-first::
#     Let _Ls_ list all directories before all other kinds of files,
#     e.g. regular files, symbolic links etc. because such directory
#     listings might be easier on the eye and therefore to comprehend.
#
export LS_X_OPTIONS=''
LS_X_OPTIONS+='--si '
LS_X_OPTIONS+='--classify '
LS_X_OPTIONS+='--color=auto '
LS_X_OPTIONS+='--time-style=long-iso '
LS_X_OPTIONS+='--group-directories-first '

# Make handling _TARs_ _tape archives_ with the _Tar_ program more
# pleasant by default in the following ways:
#
#   verbose::
#     Let _Tar_ report what it is doing.
#
export TAR_X_OPTIONS=''
TAR_X_OPTIONS+='--auto-compress '
TAR_X_OPTIONS+='--verbose '

# Let _Git_ skip reading settings from its system-wide configuration
# file `{system-home}/gitconfig`.  Assume that the user is a power user
# of _Git_ and configured every aspect of it down to the smallest detail
# in her/his personal _Git_ configuration files.
#
export GIT_CONFIG_NOSYSTEM=true

# Add _Git's_ commit message footer line `Signed-off-by`.
#
export GIT_X_SIGNOFF='--signoff'

# 1. Allow user to select multiple _Git_ branches with _Fzf_.
# 2. Exit immediately if there is no matching _Git_ branch.
export FZF_GIT_BRANCH_FZF_OPTS='--multi --exit-0'

# 1. Allow user to select multiple _Git_ tags with _Fzf_.
# 2. Exit immediately if there is no matching _Git_ tag.
export FZF_GIT_TAG_FZF_OPTS='--multi --exit-0'

# 1. Allow user to select multiple jobs with _Fzf_.
# 2. Exit immediately if there is no matching job.
export FZF_JOBS_FZF_OPTS='--multi --exit-0'

# Test if login shell has startup file with local overrides.
if [[ -f ~/.bash_login.local && -r ~/.bash_login.local ]]; then
  # Read and execute commands from that startup file.
  source ~/.bash_login.local
fi

# Interactive login shells
# ------------------------

# Test if interactive shell and its startup file is readable.
if [[ "$-" == *i* && -f ~/.bashrc && -r ~/.bashrc ]]; then
  # Read and execute commands from its startup file.
  source ~/.bashrc
fi
